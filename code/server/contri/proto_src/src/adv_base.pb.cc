// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adv_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace adv {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* RetBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PField_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* PDataCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDataCell_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_adv_5fbase_2eproto() {
  protobuf_AddDesc_adv_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adv_base.proto");
  GOOGLE_CHECK(file != NULL);
  RetBase_descriptor_ = file->message_type(0);
  static const int RetBase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBase, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBase, retmsg_),
  };
  RetBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetBase_descriptor_,
      RetBase::default_instance_,
      RetBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetBase));
  TaskInfo_descriptor_ = file->message_type(1);
  static const int TaskInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, tasklink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, tasksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskptstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskpcstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskpublisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, tasktotalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskusednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, tasketime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskpkgname_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
  PField_descriptor_ = file->message_type(2);
  static const int PField_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PField, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PField, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PField, valuetype_),
  };
  PField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PField_descriptor_,
      PField::default_instance_,
      PField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PField));
  PRow_descriptor_ = file->message_type(3);
  static const int PRow_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRow, fieldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRow, field_),
  };
  PRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRow_descriptor_,
      PRow::default_instance_,
      PRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRow));
  PDataCell_descriptor_ = file->message_type(4);
  static const int PDataCell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDataCell, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDataCell, str_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDataCell, i32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDataCell, i64_value_),
  };
  PDataCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDataCell_descriptor_,
      PDataCell::default_instance_,
      PDataCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDataCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDataCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDataCell));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adv_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetBase_descriptor_, &RetBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PField_descriptor_, &PField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRow_descriptor_, &PRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDataCell_descriptor_, &PDataCell::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adv_5fbase_2eproto() {
  delete RetBase::default_instance_;
  delete RetBase_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
  delete PField::default_instance_;
  delete PField_reflection_;
  delete PRow::default_instance_;
  delete PRow_reflection_;
  delete PDataCell::default_instance_;
  delete PDataCell_reflection_;
}

void protobuf_AddDesc_adv_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016adv_base.proto\022\013com.adv.msg\"*\n\007RetBase"
    "\022\017\n\007retcode\030\001 \002(\005\022\016\n\006retmsg\030\002 \001(\t\"\322\002\n\010Ta"
    "skInfo\022\016\n\006taskid\030\001 \002(\003\022\020\n\010tasktype\030\002 \002(\005"
    "\022\020\n\010taskname\030\003 \002(\t\022\020\n\010tasklink\030\004 \002(\t\022\020\n\010"
    "taskdesc\030\005 \002(\t\022\020\n\010tasksize\030\006 \002(\005\022\021\n\ttask"
    "price\030\007 \002(\t\022\022\n\ntaskptstep\030\010 \001(\005\022\022\n\ntaskp"
    "cstep\030\t \001(\005\022\025\n\rtaskpublisher\030\n \001(\t\022\024\n\014ta"
    "sktotalnum\030\013 \001(\005\022\023\n\013taskusednum\030\014 \001(\005\022\021\n"
    "\ttaskstime\030\r \001(\003\022\021\n\ttasketime\030\016 \001(\003\022\022\n\nt"
    "askstatus\030\017 \001(\005\022\020\n\010taskicon\030\020 \001(\t\022\023\n\013tas"
    "kpkgname\030\021 \001(\t\"8\n\006PField\022\014\n\004name\030\001 \002(\t\022\r"
    "\n\005value\030\002 \002(\t\022\021\n\tvaluetype\030\003 \002(\005\"<\n\004PRow"
    "\022\020\n\010fieldnum\030\001 \002(\005\022\"\n\005field\030\002 \003(\0132\023.com."
    "adv.msg.PField\"Q\n\tPDataCell\022\013\n\003tag\030\001 \002(\t"
    "\022\021\n\tstr_value\030\002 \001(\t\022\021\n\ti32_value\030\003 \001(\005\022\021"
    "\n\ti64_value\030\004 \001(\003", 617);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adv_base.proto", &protobuf_RegisterTypes);
  RetBase::default_instance_ = new RetBase();
  TaskInfo::default_instance_ = new TaskInfo();
  PField::default_instance_ = new PField();
  PRow::default_instance_ = new PRow();
  PDataCell::default_instance_ = new PDataCell();
  RetBase::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  PField::default_instance_->InitAsDefaultInstance();
  PRow::default_instance_->InitAsDefaultInstance();
  PDataCell::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adv_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adv_5fbase_2eproto {
  StaticDescriptorInitializer_adv_5fbase_2eproto() {
    protobuf_AddDesc_adv_5fbase_2eproto();
  }
} static_descriptor_initializer_adv_5fbase_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RetBase::kRetcodeFieldNumber;
const int RetBase::kRetmsgFieldNumber;
#endif  // !_MSC_VER

RetBase::RetBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetBase::InitAsDefaultInstance() {
}

RetBase::RetBase(const RetBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetBase::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetBase::~RetBase() {
  SharedDtor();
}

void RetBase::SharedDtor() {
  if (retmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void RetBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetBase_descriptor_;
}

const RetBase& RetBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fbase_2eproto();  return *default_instance_;
}

RetBase* RetBase::default_instance_ = NULL;

RetBase* RetBase::New() const {
  return new RetBase;
}

void RetBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_retmsg()) {
      if (retmsg_ != &::google::protobuf::internal::kEmptyString) {
        retmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }
      
      // optional string retmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->retmsg().data(), this->retmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }
  
  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retmsg().data(), this->retmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->retmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }
  
  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retmsg().data(), this->retmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }
    
    // optional string retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetBase::MergeFrom(const RetBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetBase::CopyFrom(const RetBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RetBase::Swap(RetBase* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetBase_descriptor_;
  metadata.reflection = RetBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskidFieldNumber;
const int TaskInfo::kTasktypeFieldNumber;
const int TaskInfo::kTasknameFieldNumber;
const int TaskInfo::kTasklinkFieldNumber;
const int TaskInfo::kTaskdescFieldNumber;
const int TaskInfo::kTasksizeFieldNumber;
const int TaskInfo::kTaskpriceFieldNumber;
const int TaskInfo::kTaskptstepFieldNumber;
const int TaskInfo::kTaskpcstepFieldNumber;
const int TaskInfo::kTaskpublisherFieldNumber;
const int TaskInfo::kTasktotalnumFieldNumber;
const int TaskInfo::kTaskusednumFieldNumber;
const int TaskInfo::kTaskstimeFieldNumber;
const int TaskInfo::kTasketimeFieldNumber;
const int TaskInfo::kTaskstatusFieldNumber;
const int TaskInfo::kTaskiconFieldNumber;
const int TaskInfo::kTaskpkgnameFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_LONGLONG(0);
  tasktype_ = 0;
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tasklink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tasksize_ = 0;
  taskprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskptstep_ = 0;
  taskpcstep_ = 0;
  taskpublisher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tasktotalnum_ = 0;
  taskusednum_ = 0;
  taskstime_ = GOOGLE_LONGLONG(0);
  tasketime_ = GOOGLE_LONGLONG(0);
  taskstatus_ = 0;
  taskicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskpkgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (tasklink_ != &::google::protobuf::internal::kEmptyString) {
    delete tasklink_;
  }
  if (taskdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete taskdesc_;
  }
  if (taskprice_ != &::google::protobuf::internal::kEmptyString) {
    delete taskprice_;
  }
  if (taskpublisher_ != &::google::protobuf::internal::kEmptyString) {
    delete taskpublisher_;
  }
  if (taskicon_ != &::google::protobuf::internal::kEmptyString) {
    delete taskicon_;
  }
  if (taskpkgname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskpkgname_;
  }
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fbase_2eproto();  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_LONGLONG(0);
    tasktype_ = 0;
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
    if (has_tasklink()) {
      if (tasklink_ != &::google::protobuf::internal::kEmptyString) {
        tasklink_->clear();
      }
    }
    if (has_taskdesc()) {
      if (taskdesc_ != &::google::protobuf::internal::kEmptyString) {
        taskdesc_->clear();
      }
    }
    tasksize_ = 0;
    if (has_taskprice()) {
      if (taskprice_ != &::google::protobuf::internal::kEmptyString) {
        taskprice_->clear();
      }
    }
    taskptstep_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    taskpcstep_ = 0;
    if (has_taskpublisher()) {
      if (taskpublisher_ != &::google::protobuf::internal::kEmptyString) {
        taskpublisher_->clear();
      }
    }
    tasktotalnum_ = 0;
    taskusednum_ = 0;
    taskstime_ = GOOGLE_LONGLONG(0);
    tasketime_ = GOOGLE_LONGLONG(0);
    taskstatus_ = 0;
    if (has_taskicon()) {
      if (taskicon_ != &::google::protobuf::internal::kEmptyString) {
        taskicon_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_taskpkgname()) {
      if (taskpkgname_ != &::google::protobuf::internal::kEmptyString) {
        taskpkgname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tasktype;
        break;
      }
      
      // required int32 tasktype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_taskname;
        break;
      }
      
      // required string taskname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tasklink;
        break;
      }
      
      // required string tasklink = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasklink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tasklink()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tasklink().data(), this->tasklink().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taskdesc;
        break;
      }
      
      // required string taskdesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskdesc().data(), this->taskdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tasksize;
        break;
      }
      
      // required int32 tasksize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasksize_)));
          set_has_tasksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_taskprice;
        break;
      }
      
      // required string taskprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskprice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskprice().data(), this->taskprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_taskptstep;
        break;
      }
      
      // optional int32 taskptstep = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskptstep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskptstep_)));
          set_has_taskptstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_taskpcstep;
        break;
      }
      
      // optional int32 taskpcstep = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskpcstep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskpcstep_)));
          set_has_taskpcstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_taskpublisher;
        break;
      }
      
      // optional string taskpublisher = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskpublisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskpublisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskpublisher().data(), this->taskpublisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tasktotalnum;
        break;
      }
      
      // optional int32 tasktotalnum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasktotalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktotalnum_)));
          set_has_tasktotalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_taskusednum;
        break;
      }
      
      // optional int32 taskusednum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskusednum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskusednum_)));
          set_has_taskusednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_taskstime;
        break;
      }
      
      // optional int64 taskstime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskstime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskstime_)));
          set_has_taskstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tasketime;
        break;
      }
      
      // optional int64 tasketime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasketime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tasketime_)));
          set_has_tasketime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_taskstatus;
        break;
      }
      
      // optional int32 taskstatus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskstatus_)));
          set_has_taskstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_taskicon;
        break;
      }
      
      // optional string taskicon = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskicon().data(), this->taskicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_taskpkgname;
        break;
      }
      
      // optional string taskpkgname = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskpkgname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskpkgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskpkgname().data(), this->taskpkgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }
  
  // required int32 tasktype = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tasktype(), output);
  }
  
  // required string taskname = 3;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->taskname(), output);
  }
  
  // required string tasklink = 4;
  if (has_tasklink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tasklink().data(), this->tasklink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tasklink(), output);
  }
  
  // required string taskdesc = 5;
  if (has_taskdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskdesc().data(), this->taskdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->taskdesc(), output);
  }
  
  // required int32 tasksize = 6;
  if (has_tasksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tasksize(), output);
  }
  
  // required string taskprice = 7;
  if (has_taskprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskprice().data(), this->taskprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->taskprice(), output);
  }
  
  // optional int32 taskptstep = 8;
  if (has_taskptstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->taskptstep(), output);
  }
  
  // optional int32 taskpcstep = 9;
  if (has_taskpcstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->taskpcstep(), output);
  }
  
  // optional string taskpublisher = 10;
  if (has_taskpublisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskpublisher().data(), this->taskpublisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->taskpublisher(), output);
  }
  
  // optional int32 tasktotalnum = 11;
  if (has_tasktotalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tasktotalnum(), output);
  }
  
  // optional int32 taskusednum = 12;
  if (has_taskusednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->taskusednum(), output);
  }
  
  // optional int64 taskstime = 13;
  if (has_taskstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->taskstime(), output);
  }
  
  // optional int64 tasketime = 14;
  if (has_tasketime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->tasketime(), output);
  }
  
  // optional int32 taskstatus = 15;
  if (has_taskstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->taskstatus(), output);
  }
  
  // optional string taskicon = 16;
  if (has_taskicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskicon().data(), this->taskicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->taskicon(), output);
  }
  
  // optional string taskpkgname = 17;
  if (has_taskpkgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskpkgname().data(), this->taskpkgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->taskpkgname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }
  
  // required int32 tasktype = 2;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tasktype(), target);
  }
  
  // required string taskname = 3;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->taskname(), target);
  }
  
  // required string tasklink = 4;
  if (has_tasklink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tasklink().data(), this->tasklink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tasklink(), target);
  }
  
  // required string taskdesc = 5;
  if (has_taskdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskdesc().data(), this->taskdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->taskdesc(), target);
  }
  
  // required int32 tasksize = 6;
  if (has_tasksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tasksize(), target);
  }
  
  // required string taskprice = 7;
  if (has_taskprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskprice().data(), this->taskprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->taskprice(), target);
  }
  
  // optional int32 taskptstep = 8;
  if (has_taskptstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->taskptstep(), target);
  }
  
  // optional int32 taskpcstep = 9;
  if (has_taskpcstep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->taskpcstep(), target);
  }
  
  // optional string taskpublisher = 10;
  if (has_taskpublisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskpublisher().data(), this->taskpublisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->taskpublisher(), target);
  }
  
  // optional int32 tasktotalnum = 11;
  if (has_tasktotalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tasktotalnum(), target);
  }
  
  // optional int32 taskusednum = 12;
  if (has_taskusednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->taskusednum(), target);
  }
  
  // optional int64 taskstime = 13;
  if (has_taskstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->taskstime(), target);
  }
  
  // optional int64 tasketime = 14;
  if (has_tasketime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->tasketime(), target);
  }
  
  // optional int32 taskstatus = 15;
  if (has_taskstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->taskstatus(), target);
  }
  
  // optional string taskicon = 16;
  if (has_taskicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskicon().data(), this->taskicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->taskicon(), target);
  }
  
  // optional string taskpkgname = 17;
  if (has_taskpkgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskpkgname().data(), this->taskpkgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->taskpkgname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }
    
    // required int32 tasktype = 2;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }
    
    // required string taskname = 3;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }
    
    // required string tasklink = 4;
    if (has_tasklink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tasklink());
    }
    
    // required string taskdesc = 5;
    if (has_taskdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskdesc());
    }
    
    // required int32 tasksize = 6;
    if (has_tasksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasksize());
    }
    
    // required string taskprice = 7;
    if (has_taskprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskprice());
    }
    
    // optional int32 taskptstep = 8;
    if (has_taskptstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskptstep());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 taskpcstep = 9;
    if (has_taskpcstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskpcstep());
    }
    
    // optional string taskpublisher = 10;
    if (has_taskpublisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskpublisher());
    }
    
    // optional int32 tasktotalnum = 11;
    if (has_tasktotalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktotalnum());
    }
    
    // optional int32 taskusednum = 12;
    if (has_taskusednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskusednum());
    }
    
    // optional int64 taskstime = 13;
    if (has_taskstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskstime());
    }
    
    // optional int64 tasketime = 14;
    if (has_tasketime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tasketime());
    }
    
    // optional int32 taskstatus = 15;
    if (has_taskstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskstatus());
    }
    
    // optional string taskicon = 16;
    if (has_taskicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskicon());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string taskpkgname = 17;
    if (has_taskpkgname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskpkgname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
    if (from.has_tasklink()) {
      set_tasklink(from.tasklink());
    }
    if (from.has_taskdesc()) {
      set_taskdesc(from.taskdesc());
    }
    if (from.has_tasksize()) {
      set_tasksize(from.tasksize());
    }
    if (from.has_taskprice()) {
      set_taskprice(from.taskprice());
    }
    if (from.has_taskptstep()) {
      set_taskptstep(from.taskptstep());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_taskpcstep()) {
      set_taskpcstep(from.taskpcstep());
    }
    if (from.has_taskpublisher()) {
      set_taskpublisher(from.taskpublisher());
    }
    if (from.has_tasktotalnum()) {
      set_tasktotalnum(from.tasktotalnum());
    }
    if (from.has_taskusednum()) {
      set_taskusednum(from.taskusednum());
    }
    if (from.has_taskstime()) {
      set_taskstime(from.taskstime());
    }
    if (from.has_tasketime()) {
      set_tasketime(from.tasketime());
    }
    if (from.has_taskstatus()) {
      set_taskstatus(from.taskstatus());
    }
    if (from.has_taskicon()) {
      set_taskicon(from.taskicon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_taskpkgname()) {
      set_taskpkgname(from.taskpkgname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(taskname_, other->taskname_);
    std::swap(tasklink_, other->tasklink_);
    std::swap(taskdesc_, other->taskdesc_);
    std::swap(tasksize_, other->tasksize_);
    std::swap(taskprice_, other->taskprice_);
    std::swap(taskptstep_, other->taskptstep_);
    std::swap(taskpcstep_, other->taskpcstep_);
    std::swap(taskpublisher_, other->taskpublisher_);
    std::swap(tasktotalnum_, other->tasktotalnum_);
    std::swap(taskusednum_, other->taskusednum_);
    std::swap(taskstime_, other->taskstime_);
    std::swap(tasketime_, other->tasketime_);
    std::swap(taskstatus_, other->taskstatus_);
    std::swap(taskicon_, other->taskicon_);
    std::swap(taskpkgname_, other->taskpkgname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PField::kNameFieldNumber;
const int PField::kValueFieldNumber;
const int PField::kValuetypeFieldNumber;
#endif  // !_MSC_VER

PField::PField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PField::InitAsDefaultInstance() {
}

PField::PField(const PField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PField::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valuetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PField::~PField() {
  SharedDtor();
}

void PField::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PField_descriptor_;
}

const PField& PField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fbase_2eproto();  return *default_instance_;
}

PField* PField::default_instance_ = NULL;

PField* PField::New() const {
  return new PField;
}

void PField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    valuetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valuetype;
        break;
      }
      
      // required int32 valuetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuetype_)));
          set_has_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // required int32 valuetype = 3;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // required int32 valuetype = 3;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // required int32 valuetype = 3;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PField::MergeFrom(const PField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PField::CopyFrom(const PField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PField::Swap(PField* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PField_descriptor_;
  metadata.reflection = PField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRow::kFieldnumFieldNumber;
const int PRow::kFieldFieldNumber;
#endif  // !_MSC_VER

PRow::PRow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRow::InitAsDefaultInstance() {
}

PRow::PRow(const PRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRow::SharedCtor() {
  _cached_size_ = 0;
  fieldnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRow::~PRow() {
  SharedDtor();
}

void PRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRow_descriptor_;
}

const PRow& PRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fbase_2eproto();  return *default_instance_;
}

PRow* PRow::default_instance_ = NULL;

PRow* PRow::New() const {
  return new PRow;
}

void PRow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fieldnum_ = 0;
  }
  field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fieldnum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldnum_)));
          set_has_fieldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        break;
      }
      
      // repeated .com.adv.msg.PField field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_field;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fieldnum = 1;
  if (has_fieldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fieldnum(), output);
  }
  
  // repeated .com.adv.msg.PField field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->field(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fieldnum = 1;
  if (has_fieldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fieldnum(), target);
  }
  
  // repeated .com.adv.msg.PField field = 2;
  for (int i = 0; i < this->field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->field(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fieldnum = 1;
    if (has_fieldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldnum());
    }
    
  }
  // repeated .com.adv.msg.PField field = 2;
  total_size += 1 * this->field_size();
  for (int i = 0; i < this->field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRow::MergeFrom(const PRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_.MergeFrom(from.field_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldnum()) {
      set_fieldnum(from.fieldnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRow::CopyFrom(const PRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < field_size(); i++) {
    if (!this->field(i).IsInitialized()) return false;
  }
  return true;
}

void PRow::Swap(PRow* other) {
  if (other != this) {
    std::swap(fieldnum_, other->fieldnum_);
    field_.Swap(&other->field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRow_descriptor_;
  metadata.reflection = PRow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PDataCell::kTagFieldNumber;
const int PDataCell::kStrValueFieldNumber;
const int PDataCell::kI32ValueFieldNumber;
const int PDataCell::kI64ValueFieldNumber;
#endif  // !_MSC_VER

PDataCell::PDataCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PDataCell::InitAsDefaultInstance() {
}

PDataCell::PDataCell(const PDataCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PDataCell::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  i32_value_ = 0;
  i64_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDataCell::~PDataCell() {
  SharedDtor();
}

void PDataCell::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (str_value_ != &::google::protobuf::internal::kEmptyString) {
    delete str_value_;
  }
  if (this != default_instance_) {
  }
}

void PDataCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDataCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDataCell_descriptor_;
}

const PDataCell& PDataCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fbase_2eproto();  return *default_instance_;
}

PDataCell* PDataCell::default_instance_ = NULL;

PDataCell* PDataCell::New() const {
  return new PDataCell;
}

void PDataCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_str_value()) {
      if (str_value_ != &::google::protobuf::internal::kEmptyString) {
        str_value_->clear();
      }
    }
    i32_value_ = 0;
    i64_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDataCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_value;
        break;
      }
      
      // optional string str_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_i32_value;
        break;
      }
      
      // optional int32 i32_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i32_value_)));
          set_has_i32_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_i64_value;
        break;
      }
      
      // optional int64 i64_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i64_value_)));
          set_has_i64_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PDataCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(), output);
  }
  
  // optional string str_value = 2;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str_value(), output);
  }
  
  // optional int32 i32_value = 3;
  if (has_i32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->i32_value(), output);
  }
  
  // optional int64 i64_value = 4;
  if (has_i64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->i64_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PDataCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }
  
  // optional string str_value = 2;
  if (has_str_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str_value(), target);
  }
  
  // optional int32 i32_value = 3;
  if (has_i32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->i32_value(), target);
  }
  
  // optional int64 i64_value = 4;
  if (has_i64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->i64_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PDataCell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // optional string str_value = 2;
    if (has_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_value());
    }
    
    // optional int32 i32_value = 3;
    if (has_i32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i32_value());
    }
    
    // optional int64 i64_value = 4;
    if (has_i64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i64_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDataCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDataCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDataCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDataCell::MergeFrom(const PDataCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_str_value()) {
      set_str_value(from.str_value());
    }
    if (from.has_i32_value()) {
      set_i32_value(from.i32_value());
    }
    if (from.has_i64_value()) {
      set_i64_value(from.i64_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDataCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDataCell::CopyFrom(const PDataCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDataCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PDataCell::Swap(PDataCell* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(str_value_, other->str_value_);
    std::swap(i32_value_, other->i32_value_);
    std::swap(i64_value_, other->i64_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDataCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDataCell_descriptor_;
  metadata.reflection = PDataCell_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace adv
}  // namespace com

// @@protoc_insertion_point(global_scope)
