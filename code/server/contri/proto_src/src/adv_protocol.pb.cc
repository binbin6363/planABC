// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adv_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace adv {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* UserKeepAliveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserKeepAliveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncTaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportTaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIncomeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIncomeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIncomeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIncomeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTaskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTaskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WithdrawRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithdrawRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WithdrawResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WithdrawResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MysqlResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MysqlResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedispRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedispRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedispResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedispResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerCommonMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerCommonMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_adv_5fprotocol_2eproto() {
  protobuf_AddDesc_adv_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adv_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  UserKeepAliveRequest_descriptor_ = file->message_type(0);
  static const int UserKeepAliveRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, condid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, transid_),
  };
  UserKeepAliveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserKeepAliveRequest_descriptor_,
      UserKeepAliveRequest::default_instance_,
      UserKeepAliveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserKeepAliveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserKeepAliveRequest));
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, magicnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, condid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, loginseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, transid_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResult_descriptor_ = file->message_type(2);
  static const int LoginResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, loginseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, transid_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  LogoutRequest_descriptor_ = file->message_type(3);
  static const int LogoutRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, conid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, transid_),
  };
  LogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequest));
  LogoutResult_descriptor_ = file->message_type(4);
  static const int LogoutResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResult, transid_),
  };
  LogoutResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResult_descriptor_,
      LogoutResult::default_instance_,
      LogoutResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResult));
  TaskNotify_descriptor_ = file->message_type(5);
  static const int TaskNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotify, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotify, transid_),
  };
  TaskNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskNotify_descriptor_,
      TaskNotify::default_instance_,
      TaskNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskNotify));
  SyncTaskRequest_descriptor_ = file->message_type(6);
  static const int SyncTaskRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, syncpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, synctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, syncflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, synclimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, transid_),
  };
  SyncTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncTaskRequest_descriptor_,
      SyncTaskRequest::default_instance_,
      SyncTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncTaskRequest));
  SyncTaskResult_descriptor_ = file->message_type(7);
  static const int SyncTaskResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, taskinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, synctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, continueflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, maxtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, transid_),
  };
  SyncTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncTaskResult_descriptor_,
      SyncTaskResult::default_instance_,
      SyncTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncTaskResult));
  ReportTaskRequest_descriptor_ = file->message_type(8);
  static const int ReportTaskRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskRequest, taskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskRequest, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskRequest, transid_),
  };
  ReportTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportTaskRequest_descriptor_,
      ReportTaskRequest::default_instance_,
      ReportTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportTaskRequest));
  ReportTaskResult_descriptor_ = file->message_type(9);
  static const int ReportTaskResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, done_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, report_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, transid_),
  };
  ReportTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportTaskResult_descriptor_,
      ReportTaskResult::default_instance_,
      ReportTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportTaskResult));
  GetIncomeRequest_descriptor_ = file->message_type(10);
  static const int GetIncomeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeRequest, transid_),
  };
  GetIncomeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIncomeRequest_descriptor_,
      GetIncomeRequest::default_instance_,
      GetIncomeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIncomeRequest));
  GetIncomeResult_descriptor_ = file->message_type(11);
  static const int GetIncomeResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, pre_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, useable_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, fetched_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, transid_),
  };
  GetIncomeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIncomeResult_descriptor_,
      GetIncomeResult::default_instance_,
      GetIncomeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncomeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIncomeResult));
  AckRequest_descriptor_ = file->message_type(12);
  static const int AckRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, transid_),
  };
  AckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRequest_descriptor_,
      AckRequest::default_instance_,
      AckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRequest));
  SaveTaskRequest_descriptor_ = file->message_type(13);
  static const int SaveTaskRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskRequest, taskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskRequest, transid_),
  };
  SaveTaskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTaskRequest_descriptor_,
      SaveTaskRequest::default_instance_,
      SaveTaskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTaskRequest));
  SaveTaskResult_descriptor_ = file->message_type(14);
  static const int SaveTaskResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskResult, transid_),
  };
  SaveTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTaskResult_descriptor_,
      SaveTaskResult::default_instance_,
      SaveTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTaskResult));
  WithdrawRequest_descriptor_ = file->message_type(15);
  static const int WithdrawRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, withdraw_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, open_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, transid_),
  };
  WithdrawRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithdrawRequest_descriptor_,
      WithdrawRequest::default_instance_,
      WithdrawRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithdrawRequest));
  WithdrawResult_descriptor_ = file->message_type(16);
  static const int WithdrawResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, withdraw_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, trade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, pre_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, useable_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, fetched_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, transid_),
  };
  WithdrawResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WithdrawResult_descriptor_,
      WithdrawResult::default_instance_,
      WithdrawResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WithdrawResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WithdrawResult));
  MysqlRequest_descriptor_ = file->message_type(17);
  static const int MysqlRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, sqlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, sql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, isrequestfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, timeout_),
  };
  MysqlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlRequest_descriptor_,
      MysqlRequest::default_instance_,
      MysqlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlRequest));
  MysqlResult_descriptor_ = file->message_type(18);
  static const int MysqlResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, affectedrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, insertid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, sqlid_),
  };
  MysqlResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MysqlResult_descriptor_,
      MysqlResult::default_instance_,
      MysqlResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MysqlResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MysqlResult));
  RedispRequest_descriptor_ = file->message_type(19);
  static const int RedispRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, sqlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, transid_),
  };
  RedispRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedispRequest_descriptor_,
      RedispRequest::default_instance_,
      RedispRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedispRequest));
  RedispResult_descriptor_ = file->message_type(20);
  static const int RedispResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, retbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, affectedrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, insertid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, sqlid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, transid_),
  };
  RedispResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedispResult_descriptor_,
      RedispResult::default_instance_,
      RedispResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedispResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedispResult));
  InnerCommonMsg_descriptor_ = file->message_type(21);
  static const int InnerCommonMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCommonMsg, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCommonMsg, transfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCommonMsg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCommonMsg, transid_),
  };
  InnerCommonMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerCommonMsg_descriptor_,
      InnerCommonMsg::default_instance_,
      InnerCommonMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCommonMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCommonMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerCommonMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adv_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserKeepAliveRequest_descriptor_, &UserKeepAliveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResult_descriptor_, &LogoutResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskNotify_descriptor_, &TaskNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncTaskRequest_descriptor_, &SyncTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncTaskResult_descriptor_, &SyncTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportTaskRequest_descriptor_, &ReportTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportTaskResult_descriptor_, &ReportTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIncomeRequest_descriptor_, &GetIncomeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIncomeResult_descriptor_, &GetIncomeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRequest_descriptor_, &AckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTaskRequest_descriptor_, &SaveTaskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTaskResult_descriptor_, &SaveTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithdrawRequest_descriptor_, &WithdrawRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WithdrawResult_descriptor_, &WithdrawResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlRequest_descriptor_, &MysqlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MysqlResult_descriptor_, &MysqlResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedispRequest_descriptor_, &RedispRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedispResult_descriptor_, &RedispResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerCommonMsg_descriptor_, &InnerCommonMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adv_5fprotocol_2eproto() {
  delete UserKeepAliveRequest::default_instance_;
  delete UserKeepAliveRequest_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResult::default_instance_;
  delete LogoutResult_reflection_;
  delete TaskNotify::default_instance_;
  delete TaskNotify_reflection_;
  delete SyncTaskRequest::default_instance_;
  delete SyncTaskRequest_reflection_;
  delete SyncTaskResult::default_instance_;
  delete SyncTaskResult_reflection_;
  delete ReportTaskRequest::default_instance_;
  delete ReportTaskRequest_reflection_;
  delete ReportTaskResult::default_instance_;
  delete ReportTaskResult_reflection_;
  delete GetIncomeRequest::default_instance_;
  delete GetIncomeRequest_reflection_;
  delete GetIncomeResult::default_instance_;
  delete GetIncomeResult_reflection_;
  delete AckRequest::default_instance_;
  delete AckRequest_reflection_;
  delete SaveTaskRequest::default_instance_;
  delete SaveTaskRequest_reflection_;
  delete SaveTaskResult::default_instance_;
  delete SaveTaskResult_reflection_;
  delete WithdrawRequest::default_instance_;
  delete WithdrawRequest_reflection_;
  delete WithdrawResult::default_instance_;
  delete WithdrawResult_reflection_;
  delete MysqlRequest::default_instance_;
  delete MysqlRequest_reflection_;
  delete MysqlResult::default_instance_;
  delete MysqlResult_reflection_;
  delete RedispRequest::default_instance_;
  delete RedispRequest_reflection_;
  delete RedispResult::default_instance_;
  delete RedispResult_reflection_;
  delete InnerCommonMsg::default_instance_;
  delete InnerCommonMsg_reflection_;
}

void protobuf_AddDesc_adv_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::adv::msg::protobuf_AddDesc_adv_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022adv_protocol.proto\022\013com.adv.msg\032\016adv_b"
    "ase.proto\"{\n\024UserKeepAliveRequest\022\016\n\006con"
    "did\030\001 \002(\005\022\022\n\ndevicetype\030\002 \002(\005\022\020\n\010devicei"
    "d\030\003 \001(\t\022\013\n\003uid\030\004 \001(\005\022\017\n\007version\030\005 \001(\005\022\017\n"
    "\007transid\030  \001(\005\"\255\003\n\014LoginRequest\022\r\n\005token"
    "\030\001 \002(\t\022\020\n\010magicnum\030\002 \001(\005\022\016\n\006status\030\003 \001(\005"
    "\022\022\n\ndevicetype\030\004 \002(\005\022\020\n\010deviceid\030\006 \002(\t\022\023"
    "\n\013description\030\007 \001(\t\022\016\n\006condid\030\010 \002(\005\022\020\n\010l"
    "oginseq\030\t \001(\005\022\023\n\013accounttype\030\n \001(\005\022\017\n\007ac"
    "count\030\013 \001(\t\022\016\n\006passwd\030\014 \001(\t\022\017\n\007version\030\r"
    " \001(\005\022\020\n\010nickname\030\016 \001(\t\022\016\n\006gender\030\017 \001(\005\022\020"
    "\n\010province\030\020 \001(\t\022\014\n\004city\030\021 \001(\t\022\017\n\007countr"
    "y\030\022 \001(\t\022\016\n\006avatar\030\023 \001(\t\022\014\n\004desc\030\024 \001(\t\022\r\n"
    "\005email\030\025 \001(\t\022\016\n\006mobile\030\026 \001(\t\022\014\n\004time\030\027 \001"
    "(\005\022\013\n\003uid\030\030 \001(\005\022\014\n\004flag\030\031 \001(\005\022\017\n\007transid"
    "\030  \001(\005\"\224\001\n\013LoginResult\022%\n\007retbase\030\001 \002(\0132"
    "\024.com.adv.msg.RetBase\022\013\n\003key\030\002 \001(\t\022\013\n\003ui"
    "d\030\003 \001(\005\022\020\n\010loginseq\030\004 \001(\005\022\023\n\013accounttype"
    "\030\005 \001(\005\022\014\n\004time\030\006 \001(\005\022\017\n\007transid\030  \001(\005\"U\n"
    "\rLogoutRequest\022\022\n\ndeviceType\030\001 \002(\005\022\020\n\010de"
    "viceid\030\002 \002(\t\022\r\n\005conid\030\003 \002(\005\022\017\n\007transid\030 "
    " \001(\005\"F\n\014LogoutResult\022%\n\007retbase\030\001 \002(\0132\024."
    "com.adv.msg.RetBase\022\017\n\007transid\030  \001(\005\"/\n\n"
    "TaskNotify\022\020\n\010tasktype\030\001 \002(\005\022\017\n\007transid\030"
    "  \001(\005\"l\n\017SyncTaskRequest\022\021\n\tsyncpoint\030\001 "
    "\002(\003\022\020\n\010synctype\030\002 \002(\005\022\020\n\010syncflag\030\003 \001(\005\022"
    "\021\n\tsynclimit\030\004 \001(\005\022\017\n\007transid\030  \001(\005\"\255\001\n\016"
    "SyncTaskResult\022%\n\007retbase\030\001 \002(\0132\024.com.ad"
    "v.msg.RetBase\022(\n\ttaskinfos\030\002 \003(\0132\025.com.a"
    "dv.msg.TaskInfo\022\020\n\010synctype\030\003 \002(\005\022\024\n\014con"
    "tinueflag\030\004 \001(\005\022\021\n\tmaxtaskid\030\005 \001(\003\022\017\n\007tr"
    "ansid\030  \001(\005\"]\n\021ReportTaskRequest\022\'\n\010task"
    "info\030\001 \002(\0132\025.com.adv.msg.TaskInfo\022\016\n\006rew"
    "ard\030\002 \001(\t\022\017\n\007transid\030  \001(\005\"\244\001\n\020ReportTas"
    "kResult\022%\n\007retbase\030\001 \002(\0132\024.com.adv.msg.R"
    "etBase\022\016\n\006taskid\030\002 \002(\003\022\016\n\006reward\030\003 \002(\t\022\021"
    "\n\tdone_step\030\004 \001(\005\022\020\n\010tasktype\030\005 \001(\005\022\023\n\013r"
    "eport_time\030\006 \001(\005\022\017\n\007transid\030  \001(\005\"#\n\020Get"
    "IncomeRequest\022\017\n\007transid\030  \001(\005\"\243\001\n\017GetIn"
    "comeResult\022%\n\007retbase\030\001 \002(\0132\024.com.adv.ms"
    "g.RetBase\022\020\n\010pre_cash\030\002 \002(\t\022\024\n\014useable_c"
    "ash\030\003 \002(\t\022\024\n\014fetched_cash\030\004 \002(\t\022\014\n\004rank\030"
    "\005 \001(\005\022\014\n\004desc\030\006 \001(\t\022\017\n\007transid\030  \001(\005\"E\n\n"
    "AckRequest\022\014\n\004type\030\001 \002(\005\022\n\n\002id\030\002 \003(\003\022\014\n\004"
    "time\030\003 \001(\005\022\017\n\007transid\030  \001(\005\"K\n\017SaveTaskR"
    "equest\022\'\n\010taskinfo\030\001 \003(\0132\025.com.adv.msg.T"
    "askInfo\022\017\n\007transid\030  \001(\005\"H\n\016SaveTaskResu"
    "lt\022%\n\007retbase\030\001 \002(\0132\024.com.adv.msg.RetBas"
    "e\022\017\n\007transid\030  \001(\005\"\243\001\n\017WithdrawRequest\022\014"
    "\n\004type\030\001 \002(\005\022\025\n\rwithdraw_cash\030\002 \002(\005\022\n\n\002i"
    "d\030\003 \002(\t\022\017\n\007open_id\030\004 \002(\t\022\016\n\006passwd\030\005 \002(\t"
    "\022\021\n\tuser_name\030\006 \001(\t\022\014\n\004desc\030\007 \001(\t\022\014\n\004tim"
    "e\030\010 \001(\005\022\017\n\007transid\030  \001(\005\"\331\001\n\016WithdrawRes"
    "ult\022%\n\007retbase\030\001 \002(\0132\024.com.adv.msg.RetBa"
    "se\022\014\n\004type\030\002 \002(\005\022\025\n\rwithdraw_cash\030\003 \002(\005\022"
    "\020\n\010trade_id\030\004 \002(\t\022\014\n\004desc\030\005 \001(\t\022\014\n\004time\030"
    "\006 \001(\005\022\020\n\010pre_cash\030\007 \001(\t\022\024\n\014useable_cash\030"
    "\010 \001(\t\022\024\n\014fetched_cash\030\t \001(\t\022\017\n\007transid\030 "
    " \001(\005\"b\n\014MysqlRequest\022\r\n\005sqlid\030\001 \002(\005\022\013\n\003s"
    "ql\030\002 \002(\t\022\026\n\016isrequestfield\030\003 \001(\005\022\r\n\005limi"
    "t\030\004 \001(\005\022\017\n\007timeout\030\005 \001(\005\"\214\001\n\013MysqlResult"
    "\022%\n\007retbase\030\001 \002(\0132\024.com.adv.msg.RetBase\022"
    "\024\n\014affectedrows\030\002 \001(\005\022\020\n\010insertid\030\003 \001(\005\022"
    "\037\n\004rows\030\004 \003(\0132\021.com.adv.msg.PRow\022\r\n\005sqli"
    "d\030\005 \001(\005\"k\n\rRedispRequest\022\r\n\005sqlid\030\001 \002(\005\022"
    "\013\n\003key\030\002 \002(\t\022\r\n\005param\030\003 \001(\005\022\r\n\005limit\030\004 \001"
    "(\005\022\017\n\007timeout\030\005 \001(\005\022\017\n\007transid\030  \001(\005\"\236\001\n"
    "\014RedispResult\022%\n\007retbase\030\001 \002(\0132\024.com.adv"
    ".msg.RetBase\022\024\n\014affectedrows\030\002 \001(\005\022\020\n\010in"
    "sertid\030\003 \001(\005\022\037\n\004rows\030\004 \003(\0132\021.com.adv.msg"
    ".PRow\022\r\n\005sqlid\030\005 \001(\005\022\017\n\007transid\030  \001(\005\"h\n"
    "\016InnerCommonMsg\022%\n\005items\030\001 \003(\0132\026.com.adv"
    ".msg.PDataCell\022\020\n\010transfer\030\002 \001(\t\022\014\n\004time"
    "\030\003 \001(\005\022\017\n\007transid\030  \001(\005", 2943);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adv_protocol.proto", &protobuf_RegisterTypes);
  UserKeepAliveRequest::default_instance_ = new UserKeepAliveRequest();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResult::default_instance_ = new LoginResult();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResult::default_instance_ = new LogoutResult();
  TaskNotify::default_instance_ = new TaskNotify();
  SyncTaskRequest::default_instance_ = new SyncTaskRequest();
  SyncTaskResult::default_instance_ = new SyncTaskResult();
  ReportTaskRequest::default_instance_ = new ReportTaskRequest();
  ReportTaskResult::default_instance_ = new ReportTaskResult();
  GetIncomeRequest::default_instance_ = new GetIncomeRequest();
  GetIncomeResult::default_instance_ = new GetIncomeResult();
  AckRequest::default_instance_ = new AckRequest();
  SaveTaskRequest::default_instance_ = new SaveTaskRequest();
  SaveTaskResult::default_instance_ = new SaveTaskResult();
  WithdrawRequest::default_instance_ = new WithdrawRequest();
  WithdrawResult::default_instance_ = new WithdrawResult();
  MysqlRequest::default_instance_ = new MysqlRequest();
  MysqlResult::default_instance_ = new MysqlResult();
  RedispRequest::default_instance_ = new RedispRequest();
  RedispResult::default_instance_ = new RedispResult();
  InnerCommonMsg::default_instance_ = new InnerCommonMsg();
  UserKeepAliveRequest::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResult::default_instance_->InitAsDefaultInstance();
  TaskNotify::default_instance_->InitAsDefaultInstance();
  SyncTaskRequest::default_instance_->InitAsDefaultInstance();
  SyncTaskResult::default_instance_->InitAsDefaultInstance();
  ReportTaskRequest::default_instance_->InitAsDefaultInstance();
  ReportTaskResult::default_instance_->InitAsDefaultInstance();
  GetIncomeRequest::default_instance_->InitAsDefaultInstance();
  GetIncomeResult::default_instance_->InitAsDefaultInstance();
  AckRequest::default_instance_->InitAsDefaultInstance();
  SaveTaskRequest::default_instance_->InitAsDefaultInstance();
  SaveTaskResult::default_instance_->InitAsDefaultInstance();
  WithdrawRequest::default_instance_->InitAsDefaultInstance();
  WithdrawResult::default_instance_->InitAsDefaultInstance();
  MysqlRequest::default_instance_->InitAsDefaultInstance();
  MysqlResult::default_instance_->InitAsDefaultInstance();
  RedispRequest::default_instance_->InitAsDefaultInstance();
  RedispResult::default_instance_->InitAsDefaultInstance();
  InnerCommonMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adv_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adv_5fprotocol_2eproto {
  StaticDescriptorInitializer_adv_5fprotocol_2eproto() {
    protobuf_AddDesc_adv_5fprotocol_2eproto();
  }
} static_descriptor_initializer_adv_5fprotocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UserKeepAliveRequest::kCondidFieldNumber;
const int UserKeepAliveRequest::kDevicetypeFieldNumber;
const int UserKeepAliveRequest::kDeviceidFieldNumber;
const int UserKeepAliveRequest::kUidFieldNumber;
const int UserKeepAliveRequest::kVersionFieldNumber;
const int UserKeepAliveRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

UserKeepAliveRequest::UserKeepAliveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserKeepAliveRequest::InitAsDefaultInstance() {
}

UserKeepAliveRequest::UserKeepAliveRequest(const UserKeepAliveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserKeepAliveRequest::SharedCtor() {
  _cached_size_ = 0;
  condid_ = 0;
  devicetype_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  version_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserKeepAliveRequest::~UserKeepAliveRequest() {
  SharedDtor();
}

void UserKeepAliveRequest::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void UserKeepAliveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserKeepAliveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserKeepAliveRequest_descriptor_;
}

const UserKeepAliveRequest& UserKeepAliveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

UserKeepAliveRequest* UserKeepAliveRequest::default_instance_ = NULL;

UserKeepAliveRequest* UserKeepAliveRequest::New() const {
  return new UserKeepAliveRequest;
}

void UserKeepAliveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    condid_ = 0;
    devicetype_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    uid_ = 0;
    version_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserKeepAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 condid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condid_)));
          set_has_condid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_devicetype;
        break;
      }
      
      // required int32 devicetype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceid;
        break;
      }
      
      // optional string deviceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }
      
      // optional int32 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }
      
      // optional int32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserKeepAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 condid = 1;
  if (has_condid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->condid(), output);
  }
  
  // required int32 devicetype = 2;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->devicetype(), output);
  }
  
  // optional string deviceid = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deviceid(), output);
  }
  
  // optional int32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }
  
  // optional int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserKeepAliveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 condid = 1;
  if (has_condid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->condid(), target);
  }
  
  // required int32 devicetype = 2;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->devicetype(), target);
  }
  
  // optional string deviceid = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceid(), target);
  }
  
  // optional int32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uid(), target);
  }
  
  // optional int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserKeepAliveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 condid = 1;
    if (has_condid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condid());
    }
    
    // required int32 devicetype = 2;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }
    
    // optional string deviceid = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }
    
    // optional int32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // optional int32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserKeepAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserKeepAliveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserKeepAliveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserKeepAliveRequest::MergeFrom(const UserKeepAliveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condid()) {
      set_condid(from.condid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserKeepAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserKeepAliveRequest::CopyFrom(const UserKeepAliveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserKeepAliveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UserKeepAliveRequest::Swap(UserKeepAliveRequest* other) {
  if (other != this) {
    std::swap(condid_, other->condid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(uid_, other->uid_);
    std::swap(version_, other->version_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserKeepAliveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserKeepAliveRequest_descriptor_;
  metadata.reflection = UserKeepAliveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kTokenFieldNumber;
const int LoginRequest::kMagicnumFieldNumber;
const int LoginRequest::kStatusFieldNumber;
const int LoginRequest::kDevicetypeFieldNumber;
const int LoginRequest::kDeviceidFieldNumber;
const int LoginRequest::kDescriptionFieldNumber;
const int LoginRequest::kCondidFieldNumber;
const int LoginRequest::kLoginseqFieldNumber;
const int LoginRequest::kAccounttypeFieldNumber;
const int LoginRequest::kAccountFieldNumber;
const int LoginRequest::kPasswdFieldNumber;
const int LoginRequest::kVersionFieldNumber;
const int LoginRequest::kNicknameFieldNumber;
const int LoginRequest::kGenderFieldNumber;
const int LoginRequest::kProvinceFieldNumber;
const int LoginRequest::kCityFieldNumber;
const int LoginRequest::kCountryFieldNumber;
const int LoginRequest::kAvatarFieldNumber;
const int LoginRequest::kDescFieldNumber;
const int LoginRequest::kEmailFieldNumber;
const int LoginRequest::kMobileFieldNumber;
const int LoginRequest::kTimeFieldNumber;
const int LoginRequest::kUidFieldNumber;
const int LoginRequest::kFlagFieldNumber;
const int LoginRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magicnum_ = 0;
  status_ = 0;
  devicetype_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  condid_ = 0;
  loginseq_ = 0;
  accounttype_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  uid_ = 0;
  flag_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    magicnum_ = 0;
    status_ = 0;
    devicetype_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    condid_ = 0;
    loginseq_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    accounttype_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    version_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    gender_ = 0;
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    time_ = 0;
    uid_ = 0;
    flag_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magicnum;
        break;
      }
      
      // optional int32 magicnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicnum_)));
          set_has_magicnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_devicetype;
        break;
      }
      
      // required int32 devicetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devicetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deviceid;
        break;
      }
      
      // required string deviceid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }
      
      // optional string description = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_condid;
        break;
      }
      
      // required int32 condid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condid_)));
          set_has_condid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_loginseq;
        break;
      }
      
      // optional int32 loginseq = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginseq_)));
          set_has_loginseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_accounttype;
        break;
      }
      
      // optional int32 accounttype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accounttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_account;
        break;
      }
      
      // optional string account = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_passwd;
        break;
      }
      
      // optional string passwd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_version;
        break;
      }
      
      // optional int32 version = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gender;
        break;
      }
      
      // optional int32 gender = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_province;
        break;
      }
      
      // optional string province = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_city;
        break;
      }
      
      // optional string city = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_country;
        break;
      }
      
      // optional string country = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_avatar;
        break;
      }
      
      // optional string avatar = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_desc;
        break;
      }
      
      // optional string desc = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_email;
        break;
      }
      
      // optional string email = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_mobile;
        break;
      }
      
      // optional string mobile = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_time;
        break;
      }
      
      // optional int32 time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_uid;
        break;
      }
      
      // optional int32 uid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  // optional int32 magicnum = 2;
  if (has_magicnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->magicnum(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // required int32 devicetype = 4;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->devicetype(), output);
  }
  
  // required string deviceid = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deviceid(), output);
  }
  
  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->description(), output);
  }
  
  // required int32 condid = 8;
  if (has_condid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->condid(), output);
  }
  
  // optional int32 loginseq = 9;
  if (has_loginseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->loginseq(), output);
  }
  
  // optional int32 accounttype = 10;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->accounttype(), output);
  }
  
  // optional string account = 11;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->account(), output);
  }
  
  // optional string passwd = 12;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->passwd(), output);
  }
  
  // optional int32 version = 13;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->version(), output);
  }
  
  // optional string nickname = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->nickname(), output);
  }
  
  // optional int32 gender = 15;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gender(), output);
  }
  
  // optional string province = 16;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->province(), output);
  }
  
  // optional string city = 17;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->city(), output);
  }
  
  // optional string country = 18;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->country(), output);
  }
  
  // optional string avatar = 19;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->avatar(), output);
  }
  
  // optional string desc = 20;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->desc(), output);
  }
  
  // optional string email = 21;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->email(), output);
  }
  
  // optional string mobile = 22;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->mobile(), output);
  }
  
  // optional int32 time = 23;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->time(), output);
  }
  
  // optional int32 uid = 24;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->uid(), output);
  }
  
  // optional int32 flag = 25;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->flag(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  // optional int32 magicnum = 2;
  if (has_magicnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->magicnum(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // required int32 devicetype = 4;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->devicetype(), target);
  }
  
  // required string deviceid = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deviceid(), target);
  }
  
  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }
  
  // required int32 condid = 8;
  if (has_condid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->condid(), target);
  }
  
  // optional int32 loginseq = 9;
  if (has_loginseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->loginseq(), target);
  }
  
  // optional int32 accounttype = 10;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->accounttype(), target);
  }
  
  // optional string account = 11;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->account(), target);
  }
  
  // optional string passwd = 12;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->passwd(), target);
  }
  
  // optional int32 version = 13;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->version(), target);
  }
  
  // optional string nickname = 14;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->nickname(), target);
  }
  
  // optional int32 gender = 15;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gender(), target);
  }
  
  // optional string province = 16;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->province(), target);
  }
  
  // optional string city = 17;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->city(), target);
  }
  
  // optional string country = 18;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->country(), target);
  }
  
  // optional string avatar = 19;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->avatar(), target);
  }
  
  // optional string desc = 20;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->desc(), target);
  }
  
  // optional string email = 21;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->email(), target);
  }
  
  // optional string mobile = 22;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->mobile(), target);
  }
  
  // optional int32 time = 23;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->time(), target);
  }
  
  // optional int32 uid = 24;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->uid(), target);
  }
  
  // optional int32 flag = 25;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->flag(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional int32 magicnum = 2;
    if (has_magicnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicnum());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 devicetype = 4;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }
    
    // required string deviceid = 6;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }
    
    // optional string description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required int32 condid = 8;
    if (has_condid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condid());
    }
    
    // optional int32 loginseq = 9;
    if (has_loginseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginseq());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 accounttype = 10;
    if (has_accounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }
    
    // optional string account = 11;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional string passwd = 12;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
    // optional int32 version = 13;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // optional string nickname = 14;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional int32 gender = 15;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // optional string province = 16;
    if (has_province()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }
    
    // optional string city = 17;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string country = 18;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // optional string avatar = 19;
    if (has_avatar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }
    
    // optional string desc = 20;
    if (has_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional string email = 21;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string mobile = 22;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }
    
    // optional int32 time = 23;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 uid = 24;
    if (has_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // optional int32 flag = 25;
    if (has_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_magicnum()) {
      set_magicnum(from.magicnum());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_condid()) {
      set_condid(from.condid());
    }
    if (from.has_loginseq()) {
      set_loginseq(from.loginseq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000059) != 0x00000059) return false;
  
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(magicnum_, other->magicnum_);
    std::swap(status_, other->status_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(description_, other->description_);
    std::swap(condid_, other->condid_);
    std::swap(loginseq_, other->loginseq_);
    std::swap(accounttype_, other->accounttype_);
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(version_, other->version_);
    std::swap(nickname_, other->nickname_);
    std::swap(gender_, other->gender_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(country_, other->country_);
    std::swap(avatar_, other->avatar_);
    std::swap(desc_, other->desc_);
    std::swap(email_, other->email_);
    std::swap(mobile_, other->mobile_);
    std::swap(time_, other->time_);
    std::swap(uid_, other->uid_);
    std::swap(flag_, other->flag_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResult::kRetbaseFieldNumber;
const int LoginResult::kKeyFieldNumber;
const int LoginResult::kUidFieldNumber;
const int LoginResult::kLoginseqFieldNumber;
const int LoginResult::kAccounttypeFieldNumber;
const int LoginResult::kTimeFieldNumber;
const int LoginResult::kTransidFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  loginseq_ = 0;
  accounttype_ = 0;
  time_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete retbase_;
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    uid_ = 0;
    loginseq_ = 0;
    accounttype_ = 0;
    time_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }
      
      // optional int32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginseq;
        break;
      }
      
      // optional int32 loginseq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginseq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginseq_)));
          set_has_loginseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accounttype;
        break;
      }
      
      // optional int32 accounttype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accounttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // optional int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional int32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }
  
  // optional int32 loginseq = 4;
  if (has_loginseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loginseq(), output);
  }
  
  // optional int32 accounttype = 5;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->accounttype(), output);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional int32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }
  
  // optional int32 loginseq = 4;
  if (has_loginseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loginseq(), target);
  }
  
  // optional int32 accounttype = 5;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->accounttype(), target);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional int32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // optional int32 loginseq = 4;
    if (has_loginseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginseq());
    }
    
    // optional int32 accounttype = 5;
    if (has_accounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }
    
    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_loginseq()) {
      set_loginseq(from.loginseq());
    }
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(key_, other->key_);
    std::swap(uid_, other->uid_);
    std::swap(loginseq_, other->loginseq_);
    std::swap(accounttype_, other->accounttype_);
    std::swap(time_, other->time_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRequest::kDeviceTypeFieldNumber;
const int LogoutRequest::kDeviceidFieldNumber;
const int LogoutRequest::kConidFieldNumber;
const int LogoutRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRequest::InitAsDefaultInstance() {
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  devicetype_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  conid_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New() const {
  return new LogoutRequest;
}

void LogoutRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    devicetype_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    conid_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 deviceType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceid;
        break;
      }
      
      // required string deviceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conid;
        break;
      }
      
      // required int32 conid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conid_)));
          set_has_conid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 deviceType = 1;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->devicetype(), output);
  }
  
  // required string deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }
  
  // required int32 conid = 3;
  if (has_conid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->conid(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 deviceType = 1;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->devicetype(), target);
  }
  
  // required string deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }
  
  // required int32 conid = 3;
  if (has_conid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->conid(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 deviceType = 1;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }
    
    // required string deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }
    
    // required int32 conid = 3;
    if (has_conid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conid());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_conid()) {
      set_conid(from.conid());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other != this) {
    std::swap(devicetype_, other->devicetype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(conid_, other->conid_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResult::kRetbaseFieldNumber;
const int LogoutResult::kTransidFieldNumber;
#endif  // !_MSC_VER

LogoutResult::LogoutResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

LogoutResult::LogoutResult(const LogoutResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResult::~LogoutResult() {
  SharedDtor();
}

void LogoutResult::SharedDtor() {
  if (this != default_instance_) {
    delete retbase_;
  }
}

void LogoutResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResult_descriptor_;
}

const LogoutResult& LogoutResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

LogoutResult* LogoutResult::default_instance_ = NULL;

LogoutResult* LogoutResult::New() const {
  return new LogoutResult;
}

void LogoutResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResult::MergeFrom(const LogoutResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResult::CopyFrom(const LogoutResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  return true;
}

void LogoutResult::Swap(LogoutResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResult_descriptor_;
  metadata.reflection = LogoutResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskNotify::kTasktypeFieldNumber;
const int TaskNotify::kTransidFieldNumber;
#endif  // !_MSC_VER

TaskNotify::TaskNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskNotify::InitAsDefaultInstance() {
}

TaskNotify::TaskNotify(const TaskNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskNotify::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskNotify::~TaskNotify() {
  SharedDtor();
}

void TaskNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskNotify_descriptor_;
}

const TaskNotify& TaskNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

TaskNotify* TaskNotify::default_instance_ = NULL;

TaskNotify* TaskNotify::New() const {
  return new TaskNotify;
}

void TaskNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tasktype_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tasktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tasktype = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tasktype(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tasktype = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tasktype(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tasktype = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskNotify::MergeFrom(const TaskNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskNotify::CopyFrom(const TaskNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TaskNotify::Swap(TaskNotify* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskNotify_descriptor_;
  metadata.reflection = TaskNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncTaskRequest::kSyncpointFieldNumber;
const int SyncTaskRequest::kSynctypeFieldNumber;
const int SyncTaskRequest::kSyncflagFieldNumber;
const int SyncTaskRequest::kSynclimitFieldNumber;
const int SyncTaskRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

SyncTaskRequest::SyncTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncTaskRequest::InitAsDefaultInstance() {
}

SyncTaskRequest::SyncTaskRequest(const SyncTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  syncpoint_ = GOOGLE_LONGLONG(0);
  synctype_ = 0;
  syncflag_ = 0;
  synclimit_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncTaskRequest::~SyncTaskRequest() {
  SharedDtor();
}

void SyncTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncTaskRequest_descriptor_;
}

const SyncTaskRequest& SyncTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

SyncTaskRequest* SyncTaskRequest::default_instance_ = NULL;

SyncTaskRequest* SyncTaskRequest::New() const {
  return new SyncTaskRequest;
}

void SyncTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    syncpoint_ = GOOGLE_LONGLONG(0);
    synctype_ = 0;
    syncflag_ = 0;
    synclimit_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 syncpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &syncpoint_)));
          set_has_syncpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_synctype;
        break;
      }
      
      // required int32 synctype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synctype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synctype_)));
          set_has_synctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_syncflag;
        break;
      }
      
      // optional int32 syncflag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syncflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syncflag_)));
          set_has_syncflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_synclimit;
        break;
      }
      
      // optional int32 synclimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synclimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synclimit_)));
          set_has_synclimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 syncpoint = 1;
  if (has_syncpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->syncpoint(), output);
  }
  
  // required int32 synctype = 2;
  if (has_synctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->synctype(), output);
  }
  
  // optional int32 syncflag = 3;
  if (has_syncflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->syncflag(), output);
  }
  
  // optional int32 synclimit = 4;
  if (has_synclimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->synclimit(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 syncpoint = 1;
  if (has_syncpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->syncpoint(), target);
  }
  
  // required int32 synctype = 2;
  if (has_synctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->synctype(), target);
  }
  
  // optional int32 syncflag = 3;
  if (has_syncflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->syncflag(), target);
  }
  
  // optional int32 synclimit = 4;
  if (has_synclimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->synclimit(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 syncpoint = 1;
    if (has_syncpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->syncpoint());
    }
    
    // required int32 synctype = 2;
    if (has_synctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synctype());
    }
    
    // optional int32 syncflag = 3;
    if (has_syncflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->syncflag());
    }
    
    // optional int32 synclimit = 4;
    if (has_synclimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synclimit());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncTaskRequest::MergeFrom(const SyncTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syncpoint()) {
      set_syncpoint(from.syncpoint());
    }
    if (from.has_synctype()) {
      set_synctype(from.synctype());
    }
    if (from.has_syncflag()) {
      set_syncflag(from.syncflag());
    }
    if (from.has_synclimit()) {
      set_synclimit(from.synclimit());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncTaskRequest::CopyFrom(const SyncTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SyncTaskRequest::Swap(SyncTaskRequest* other) {
  if (other != this) {
    std::swap(syncpoint_, other->syncpoint_);
    std::swap(synctype_, other->synctype_);
    std::swap(syncflag_, other->syncflag_);
    std::swap(synclimit_, other->synclimit_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncTaskRequest_descriptor_;
  metadata.reflection = SyncTaskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncTaskResult::kRetbaseFieldNumber;
const int SyncTaskResult::kTaskinfosFieldNumber;
const int SyncTaskResult::kSynctypeFieldNumber;
const int SyncTaskResult::kContinueflagFieldNumber;
const int SyncTaskResult::kMaxtaskidFieldNumber;
const int SyncTaskResult::kTransidFieldNumber;
#endif  // !_MSC_VER

SyncTaskResult::SyncTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncTaskResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

SyncTaskResult::SyncTaskResult(const SyncTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncTaskResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  synctype_ = 0;
  continueflag_ = 0;
  maxtaskid_ = GOOGLE_LONGLONG(0);
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncTaskResult::~SyncTaskResult() {
  SharedDtor();
}

void SyncTaskResult::SharedDtor() {
  if (this != default_instance_) {
    delete retbase_;
  }
}

void SyncTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncTaskResult_descriptor_;
}

const SyncTaskResult& SyncTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

SyncTaskResult* SyncTaskResult::default_instance_ = NULL;

SyncTaskResult* SyncTaskResult::New() const {
  return new SyncTaskResult;
}

void SyncTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    synctype_ = 0;
    continueflag_ = 0;
    maxtaskid_ = GOOGLE_LONGLONG(0);
    transid_ = 0;
  }
  taskinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taskinfos;
        break;
      }
      
      // repeated .com.adv.msg.TaskInfo taskinfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taskinfos;
        if (input->ExpectTag(24)) goto parse_synctype;
        break;
      }
      
      // required int32 synctype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_synctype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synctype_)));
          set_has_synctype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_continueflag;
        break;
      }
      
      // optional int32 continueflag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueflag_)));
          set_has_continueflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxtaskid;
        break;
      }
      
      // optional int64 maxtaskid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxtaskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxtaskid_)));
          set_has_maxtaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // repeated .com.adv.msg.TaskInfo taskinfos = 2;
  for (int i = 0; i < this->taskinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taskinfos(i), output);
  }
  
  // required int32 synctype = 3;
  if (has_synctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->synctype(), output);
  }
  
  // optional int32 continueflag = 4;
  if (has_continueflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->continueflag(), output);
  }
  
  // optional int64 maxtaskid = 5;
  if (has_maxtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->maxtaskid(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // repeated .com.adv.msg.TaskInfo taskinfos = 2;
  for (int i = 0; i < this->taskinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->taskinfos(i), target);
  }
  
  // required int32 synctype = 3;
  if (has_synctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->synctype(), target);
  }
  
  // optional int32 continueflag = 4;
  if (has_continueflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->continueflag(), target);
  }
  
  // optional int64 maxtaskid = 5;
  if (has_maxtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->maxtaskid(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncTaskResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // required int32 synctype = 3;
    if (has_synctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synctype());
    }
    
    // optional int32 continueflag = 4;
    if (has_continueflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continueflag());
    }
    
    // optional int64 maxtaskid = 5;
    if (has_maxtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxtaskid());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  // repeated .com.adv.msg.TaskInfo taskinfos = 2;
  total_size += 1 * this->taskinfos_size();
  for (int i = 0; i < this->taskinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncTaskResult::MergeFrom(const SyncTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfos_.MergeFrom(from.taskinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_synctype()) {
      set_synctype(from.synctype());
    }
    if (from.has_continueflag()) {
      set_continueflag(from.continueflag());
    }
    if (from.has_maxtaskid()) {
      set_maxtaskid(from.maxtaskid());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncTaskResult::CopyFrom(const SyncTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  for (int i = 0; i < taskinfos_size(); i++) {
    if (!this->taskinfos(i).IsInitialized()) return false;
  }
  return true;
}

void SyncTaskResult::Swap(SyncTaskResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    taskinfos_.Swap(&other->taskinfos_);
    std::swap(synctype_, other->synctype_);
    std::swap(continueflag_, other->continueflag_);
    std::swap(maxtaskid_, other->maxtaskid_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncTaskResult_descriptor_;
  metadata.reflection = SyncTaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportTaskRequest::kTaskinfoFieldNumber;
const int ReportTaskRequest::kRewardFieldNumber;
const int ReportTaskRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

ReportTaskRequest::ReportTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportTaskRequest::InitAsDefaultInstance() {
  taskinfo_ = const_cast< ::com::adv::msg::TaskInfo*>(&::com::adv::msg::TaskInfo::default_instance());
}

ReportTaskRequest::ReportTaskRequest(const ReportTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  taskinfo_ = NULL;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportTaskRequest::~ReportTaskRequest() {
  SharedDtor();
}

void ReportTaskRequest::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
    delete taskinfo_;
  }
}

void ReportTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportTaskRequest_descriptor_;
}

const ReportTaskRequest& ReportTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

ReportTaskRequest* ReportTaskRequest::default_instance_ = NULL;

ReportTaskRequest* ReportTaskRequest::New() const {
  return new ReportTaskRequest;
}

void ReportTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskinfo()) {
      if (taskinfo_ != NULL) taskinfo_->::com::adv::msg::TaskInfo::Clear();
    }
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.TaskInfo taskinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // optional string reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.TaskInfo taskinfo = 1;
  if (has_taskinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(), output);
  }
  
  // optional string reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reward(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.TaskInfo taskinfo = 1;
  if (has_taskinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(), target);
  }
  
  // optional string reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reward(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.TaskInfo taskinfo = 1;
    if (has_taskinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskinfo());
    }
    
    // optional string reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportTaskRequest::MergeFrom(const ReportTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskinfo()) {
      mutable_taskinfo()->::com::adv::msg::TaskInfo::MergeFrom(from.taskinfo());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportTaskRequest::CopyFrom(const ReportTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportTaskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_taskinfo()) {
    if (!this->taskinfo().IsInitialized()) return false;
  }
  return true;
}

void ReportTaskRequest::Swap(ReportTaskRequest* other) {
  if (other != this) {
    std::swap(taskinfo_, other->taskinfo_);
    std::swap(reward_, other->reward_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportTaskRequest_descriptor_;
  metadata.reflection = ReportTaskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportTaskResult::kRetbaseFieldNumber;
const int ReportTaskResult::kTaskidFieldNumber;
const int ReportTaskResult::kRewardFieldNumber;
const int ReportTaskResult::kDoneStepFieldNumber;
const int ReportTaskResult::kTasktypeFieldNumber;
const int ReportTaskResult::kReportTimeFieldNumber;
const int ReportTaskResult::kTransidFieldNumber;
#endif  // !_MSC_VER

ReportTaskResult::ReportTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportTaskResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

ReportTaskResult::ReportTaskResult(const ReportTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportTaskResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  taskid_ = GOOGLE_LONGLONG(0);
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  done_step_ = 0;
  tasktype_ = 0;
  report_time_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportTaskResult::~ReportTaskResult() {
  SharedDtor();
}

void ReportTaskResult::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
    delete retbase_;
  }
}

void ReportTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportTaskResult_descriptor_;
}

const ReportTaskResult& ReportTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

ReportTaskResult* ReportTaskResult::default_instance_ = NULL;

ReportTaskResult* ReportTaskResult::New() const {
  return new ReportTaskResult;
}

void ReportTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    taskid_ = GOOGLE_LONGLONG(0);
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
    done_step_ = 0;
    tasktype_ = 0;
    report_time_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskid;
        break;
      }
      
      // required int64 taskid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }
      
      // required string reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_done_step;
        break;
      }
      
      // optional int32 done_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &done_step_)));
          set_has_done_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tasktype;
        break;
      }
      
      // optional int32 tasktype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tasktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_report_time;
        break;
      }
      
      // optional int32 report_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_time_)));
          set_has_report_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // required int64 taskid = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->taskid(), output);
  }
  
  // required string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reward(), output);
  }
  
  // optional int32 done_step = 4;
  if (has_done_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->done_step(), output);
  }
  
  // optional int32 tasktype = 5;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tasktype(), output);
  }
  
  // optional int32 report_time = 6;
  if (has_report_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->report_time(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // required int64 taskid = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->taskid(), target);
  }
  
  // required string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reward(), target);
  }
  
  // optional int32 done_step = 4;
  if (has_done_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->done_step(), target);
  }
  
  // optional int32 tasktype = 5;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tasktype(), target);
  }
  
  // optional int32 report_time = 6;
  if (has_report_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->report_time(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportTaskResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // required int64 taskid = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }
    
    // required string reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }
    
    // optional int32 done_step = 4;
    if (has_done_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->done_step());
    }
    
    // optional int32 tasktype = 5;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }
    
    // optional int32 report_time = 6;
    if (has_report_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_time());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportTaskResult::MergeFrom(const ReportTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_done_step()) {
      set_done_step(from.done_step());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_report_time()) {
      set_report_time(from.report_time());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportTaskResult::CopyFrom(const ReportTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportTaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  return true;
}

void ReportTaskResult::Swap(ReportTaskResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(taskid_, other->taskid_);
    std::swap(reward_, other->reward_);
    std::swap(done_step_, other->done_step_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(report_time_, other->report_time_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportTaskResult_descriptor_;
  metadata.reflection = ReportTaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIncomeRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

GetIncomeRequest::GetIncomeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIncomeRequest::InitAsDefaultInstance() {
}

GetIncomeRequest::GetIncomeRequest(const GetIncomeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIncomeRequest::SharedCtor() {
  _cached_size_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIncomeRequest::~GetIncomeRequest() {
  SharedDtor();
}

void GetIncomeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetIncomeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIncomeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIncomeRequest_descriptor_;
}

const GetIncomeRequest& GetIncomeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

GetIncomeRequest* GetIncomeRequest::default_instance_ = NULL;

GetIncomeRequest* GetIncomeRequest::New() const {
  return new GetIncomeRequest;
}

void GetIncomeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIncomeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIncomeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIncomeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIncomeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIncomeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIncomeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIncomeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIncomeRequest::MergeFrom(const GetIncomeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIncomeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIncomeRequest::CopyFrom(const GetIncomeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIncomeRequest::IsInitialized() const {
  
  return true;
}

void GetIncomeRequest::Swap(GetIncomeRequest* other) {
  if (other != this) {
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIncomeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIncomeRequest_descriptor_;
  metadata.reflection = GetIncomeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIncomeResult::kRetbaseFieldNumber;
const int GetIncomeResult::kPreCashFieldNumber;
const int GetIncomeResult::kUseableCashFieldNumber;
const int GetIncomeResult::kFetchedCashFieldNumber;
const int GetIncomeResult::kRankFieldNumber;
const int GetIncomeResult::kDescFieldNumber;
const int GetIncomeResult::kTransidFieldNumber;
#endif  // !_MSC_VER

GetIncomeResult::GetIncomeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIncomeResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

GetIncomeResult::GetIncomeResult(const GetIncomeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIncomeResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  pre_cash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useable_cash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fetched_cash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIncomeResult::~GetIncomeResult() {
  SharedDtor();
}

void GetIncomeResult::SharedDtor() {
  if (pre_cash_ != &::google::protobuf::internal::kEmptyString) {
    delete pre_cash_;
  }
  if (useable_cash_ != &::google::protobuf::internal::kEmptyString) {
    delete useable_cash_;
  }
  if (fetched_cash_ != &::google::protobuf::internal::kEmptyString) {
    delete fetched_cash_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
    delete retbase_;
  }
}

void GetIncomeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIncomeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIncomeResult_descriptor_;
}

const GetIncomeResult& GetIncomeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

GetIncomeResult* GetIncomeResult::default_instance_ = NULL;

GetIncomeResult* GetIncomeResult::New() const {
  return new GetIncomeResult;
}

void GetIncomeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    if (has_pre_cash()) {
      if (pre_cash_ != &::google::protobuf::internal::kEmptyString) {
        pre_cash_->clear();
      }
    }
    if (has_useable_cash()) {
      if (useable_cash_ != &::google::protobuf::internal::kEmptyString) {
        useable_cash_->clear();
      }
    }
    if (has_fetched_cash()) {
      if (fetched_cash_ != &::google::protobuf::internal::kEmptyString) {
        fetched_cash_->clear();
      }
    }
    rank_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIncomeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pre_cash;
        break;
      }
      
      // required string pre_cash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pre_cash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pre_cash().data(), this->pre_cash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_useable_cash;
        break;
      }
      
      // required string useable_cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useable_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useable_cash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useable_cash().data(), this->useable_cash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fetched_cash;
        break;
      }
      
      // required string fetched_cash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetched_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fetched_cash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fetched_cash().data(), this->fetched_cash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }
      
      // optional string desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIncomeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // required string pre_cash = 2;
  if (has_pre_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pre_cash().data(), this->pre_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pre_cash(), output);
  }
  
  // required string useable_cash = 3;
  if (has_useable_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useable_cash().data(), this->useable_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->useable_cash(), output);
  }
  
  // required string fetched_cash = 4;
  if (has_fetched_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fetched_cash().data(), this->fetched_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fetched_cash(), output);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }
  
  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->desc(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIncomeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // required string pre_cash = 2;
  if (has_pre_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pre_cash().data(), this->pre_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pre_cash(), target);
  }
  
  // required string useable_cash = 3;
  if (has_useable_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useable_cash().data(), this->useable_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useable_cash(), target);
  }
  
  // required string fetched_cash = 4;
  if (has_fetched_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fetched_cash().data(), this->fetched_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fetched_cash(), target);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }
  
  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIncomeResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // required string pre_cash = 2;
    if (has_pre_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pre_cash());
    }
    
    // required string useable_cash = 3;
    if (has_useable_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useable_cash());
    }
    
    // required string fetched_cash = 4;
    if (has_fetched_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fetched_cash());
    }
    
    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIncomeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIncomeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIncomeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIncomeResult::MergeFrom(const GetIncomeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_pre_cash()) {
      set_pre_cash(from.pre_cash());
    }
    if (from.has_useable_cash()) {
      set_useable_cash(from.useable_cash());
    }
    if (from.has_fetched_cash()) {
      set_fetched_cash(from.fetched_cash());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIncomeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIncomeResult::CopyFrom(const GetIncomeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIncomeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  return true;
}

void GetIncomeResult::Swap(GetIncomeResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(pre_cash_, other->pre_cash_);
    std::swap(useable_cash_, other->useable_cash_);
    std::swap(fetched_cash_, other->fetched_cash_);
    std::swap(rank_, other->rank_);
    std::swap(desc_, other->desc_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIncomeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIncomeResult_descriptor_;
  metadata.reflection = GetIncomeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRequest::kTypeFieldNumber;
const int AckRequest::kIdFieldNumber;
const int AckRequest::kTimeFieldNumber;
const int AckRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

AckRequest::AckRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRequest::InitAsDefaultInstance() {
}

AckRequest::AckRequest(const AckRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRequest::~AckRequest() {
  SharedDtor();
}

void AckRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRequest_descriptor_;
}

const AckRequest& AckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

AckRequest* AckRequest::default_instance_ = NULL;

AckRequest* AckRequest::New() const {
  return new AckRequest;
}

void AckRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    time_ = 0;
    transid_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // repeated int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated int64 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->id(i), output);
  }
  
  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated int64 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->id(i), target);
  }
  
  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  // repeated int64 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRequest::MergeFrom(const AckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRequest::CopyFrom(const AckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckRequest::Swap(AckRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    id_.Swap(&other->id_);
    std::swap(time_, other->time_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRequest_descriptor_;
  metadata.reflection = AckRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTaskRequest::kTaskinfoFieldNumber;
const int SaveTaskRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

SaveTaskRequest::SaveTaskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveTaskRequest::InitAsDefaultInstance() {
}

SaveTaskRequest::SaveTaskRequest(const SaveTaskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTaskRequest::~SaveTaskRequest() {
  SharedDtor();
}

void SaveTaskRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTaskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTaskRequest_descriptor_;
}

const SaveTaskRequest& SaveTaskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

SaveTaskRequest* SaveTaskRequest::default_instance_ = NULL;

SaveTaskRequest* SaveTaskRequest::New() const {
  return new SaveTaskRequest;
}

void SaveTaskRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    transid_ = 0;
  }
  taskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.adv.msg.TaskInfo taskinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskinfo;
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.adv.msg.TaskInfo taskinfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(i), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveTaskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.adv.msg.TaskInfo taskinfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(i), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveTaskRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  // repeated .com.adv.msg.TaskInfo taskinfo = 1;
  total_size += 1 * this->taskinfo_size();
  for (int i = 0; i < this->taskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTaskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTaskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTaskRequest::MergeFrom(const SaveTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfo_.MergeFrom(from.taskinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTaskRequest::CopyFrom(const SaveTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTaskRequest::IsInitialized() const {
  
  for (int i = 0; i < taskinfo_size(); i++) {
    if (!this->taskinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SaveTaskRequest::Swap(SaveTaskRequest* other) {
  if (other != this) {
    taskinfo_.Swap(&other->taskinfo_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTaskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTaskRequest_descriptor_;
  metadata.reflection = SaveTaskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTaskResult::kRetbaseFieldNumber;
const int SaveTaskResult::kTransidFieldNumber;
#endif  // !_MSC_VER

SaveTaskResult::SaveTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveTaskResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

SaveTaskResult::SaveTaskResult(const SaveTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveTaskResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTaskResult::~SaveTaskResult() {
  SharedDtor();
}

void SaveTaskResult::SharedDtor() {
  if (this != default_instance_) {
    delete retbase_;
  }
}

void SaveTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTaskResult_descriptor_;
}

const SaveTaskResult& SaveTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

SaveTaskResult* SaveTaskResult::default_instance_ = NULL;

SaveTaskResult* SaveTaskResult::New() const {
  return new SaveTaskResult;
}

void SaveTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveTaskResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTaskResult::MergeFrom(const SaveTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTaskResult::CopyFrom(const SaveTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  return true;
}

void SaveTaskResult::Swap(SaveTaskResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTaskResult_descriptor_;
  metadata.reflection = SaveTaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WithdrawRequest::kTypeFieldNumber;
const int WithdrawRequest::kWithdrawCashFieldNumber;
const int WithdrawRequest::kIdFieldNumber;
const int WithdrawRequest::kOpenIdFieldNumber;
const int WithdrawRequest::kPasswdFieldNumber;
const int WithdrawRequest::kUserNameFieldNumber;
const int WithdrawRequest::kDescFieldNumber;
const int WithdrawRequest::kTimeFieldNumber;
const int WithdrawRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

WithdrawRequest::WithdrawRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithdrawRequest::InitAsDefaultInstance() {
}

WithdrawRequest::WithdrawRequest(const WithdrawRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithdrawRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  withdraw_cash_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithdrawRequest::~WithdrawRequest() {
  SharedDtor();
}

void WithdrawRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (open_id_ != &::google::protobuf::internal::kEmptyString) {
    delete open_id_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void WithdrawRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithdrawRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawRequest_descriptor_;
}

const WithdrawRequest& WithdrawRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

WithdrawRequest* WithdrawRequest::default_instance_ = NULL;

WithdrawRequest* WithdrawRequest::New() const {
  return new WithdrawRequest;
}

void WithdrawRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    withdraw_cash_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_open_id()) {
      if (open_id_ != &::google::protobuf::internal::kEmptyString) {
        open_id_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithdrawRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_withdraw_cash;
        break;
      }
      
      // required int32 withdraw_cash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_withdraw_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &withdraw_cash_)));
          set_has_withdraw_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }
      
      // required string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_open_id;
        break;
      }
      
      // required string open_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->open_id().data(), this->open_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }
      
      // optional string desc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }
      
      // optional int32 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithdrawRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 withdraw_cash = 2;
  if (has_withdraw_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->withdraw_cash(), output);
  }
  
  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }
  
  // required string open_id = 4;
  if (has_open_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_id().data(), this->open_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->open_id(), output);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }
  
  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }
  
  // optional string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->desc(), output);
  }
  
  // optional int32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->time(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithdrawRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 withdraw_cash = 2;
  if (has_withdraw_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->withdraw_cash(), target);
  }
  
  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }
  
  // required string open_id = 4;
  if (has_open_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->open_id().data(), this->open_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->open_id(), target);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }
  
  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }
  
  // optional string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->desc(), target);
  }
  
  // optional int32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->time(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithdrawRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 withdraw_cash = 2;
    if (has_withdraw_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->withdraw_cash());
    }
    
    // required string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string open_id = 4;
    if (has_open_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->open_id());
    }
    
    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string desc = 7;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithdrawRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithdrawRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithdrawRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithdrawRequest::MergeFrom(const WithdrawRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_withdraw_cash()) {
      set_withdraw_cash(from.withdraw_cash());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_open_id()) {
      set_open_id(from.open_id());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithdrawRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawRequest::CopyFrom(const WithdrawRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void WithdrawRequest::Swap(WithdrawRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(withdraw_cash_, other->withdraw_cash_);
    std::swap(id_, other->id_);
    std::swap(open_id_, other->open_id_);
    std::swap(passwd_, other->passwd_);
    std::swap(user_name_, other->user_name_);
    std::swap(desc_, other->desc_);
    std::swap(time_, other->time_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithdrawRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithdrawRequest_descriptor_;
  metadata.reflection = WithdrawRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WithdrawResult::kRetbaseFieldNumber;
const int WithdrawResult::kTypeFieldNumber;
const int WithdrawResult::kWithdrawCashFieldNumber;
const int WithdrawResult::kTradeIdFieldNumber;
const int WithdrawResult::kDescFieldNumber;
const int WithdrawResult::kTimeFieldNumber;
const int WithdrawResult::kPreCashFieldNumber;
const int WithdrawResult::kUseableCashFieldNumber;
const int WithdrawResult::kFetchedCashFieldNumber;
const int WithdrawResult::kTransidFieldNumber;
#endif  // !_MSC_VER

WithdrawResult::WithdrawResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WithdrawResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

WithdrawResult::WithdrawResult(const WithdrawResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WithdrawResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  type_ = 0;
  withdraw_cash_ = 0;
  trade_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  pre_cash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useable_cash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fetched_cash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WithdrawResult::~WithdrawResult() {
  SharedDtor();
}

void WithdrawResult::SharedDtor() {
  if (trade_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trade_id_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (pre_cash_ != &::google::protobuf::internal::kEmptyString) {
    delete pre_cash_;
  }
  if (useable_cash_ != &::google::protobuf::internal::kEmptyString) {
    delete useable_cash_;
  }
  if (fetched_cash_ != &::google::protobuf::internal::kEmptyString) {
    delete fetched_cash_;
  }
  if (this != default_instance_) {
    delete retbase_;
  }
}

void WithdrawResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WithdrawResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WithdrawResult_descriptor_;
}

const WithdrawResult& WithdrawResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

WithdrawResult* WithdrawResult::default_instance_ = NULL;

WithdrawResult* WithdrawResult::New() const {
  return new WithdrawResult;
}

void WithdrawResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    type_ = 0;
    withdraw_cash_ = 0;
    if (has_trade_id()) {
      if (trade_id_ != &::google::protobuf::internal::kEmptyString) {
        trade_id_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    time_ = 0;
    if (has_pre_cash()) {
      if (pre_cash_ != &::google::protobuf::internal::kEmptyString) {
        pre_cash_->clear();
      }
    }
    if (has_useable_cash()) {
      if (useable_cash_ != &::google::protobuf::internal::kEmptyString) {
        useable_cash_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fetched_cash()) {
      if (fetched_cash_ != &::google::protobuf::internal::kEmptyString) {
        fetched_cash_->clear();
      }
    }
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WithdrawResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_withdraw_cash;
        break;
      }
      
      // required int32 withdraw_cash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_withdraw_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &withdraw_cash_)));
          set_has_withdraw_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trade_id;
        break;
      }
      
      // required string trade_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trade_id().data(), this->trade_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }
      
      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // optional int32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pre_cash;
        break;
      }
      
      // optional string pre_cash = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pre_cash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pre_cash().data(), this->pre_cash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_useable_cash;
        break;
      }
      
      // optional string useable_cash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useable_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useable_cash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useable_cash().data(), this->useable_cash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fetched_cash;
        break;
      }
      
      // optional string fetched_cash = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetched_cash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fetched_cash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fetched_cash().data(), this->fetched_cash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WithdrawResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int32 withdraw_cash = 3;
  if (has_withdraw_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->withdraw_cash(), output);
  }
  
  // required string trade_id = 4;
  if (has_trade_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trade_id().data(), this->trade_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->trade_id(), output);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time(), output);
  }
  
  // optional string pre_cash = 7;
  if (has_pre_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pre_cash().data(), this->pre_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pre_cash(), output);
  }
  
  // optional string useable_cash = 8;
  if (has_useable_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useable_cash().data(), this->useable_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->useable_cash(), output);
  }
  
  // optional string fetched_cash = 9;
  if (has_fetched_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fetched_cash().data(), this->fetched_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->fetched_cash(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WithdrawResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int32 withdraw_cash = 3;
  if (has_withdraw_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->withdraw_cash(), target);
  }
  
  // required string trade_id = 4;
  if (has_trade_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trade_id().data(), this->trade_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trade_id(), target);
  }
  
  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }
  
  // optional int32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time(), target);
  }
  
  // optional string pre_cash = 7;
  if (has_pre_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pre_cash().data(), this->pre_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pre_cash(), target);
  }
  
  // optional string useable_cash = 8;
  if (has_useable_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useable_cash().data(), this->useable_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->useable_cash(), target);
  }
  
  // optional string fetched_cash = 9;
  if (has_fetched_cash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fetched_cash().data(), this->fetched_cash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->fetched_cash(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WithdrawResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 withdraw_cash = 3;
    if (has_withdraw_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->withdraw_cash());
    }
    
    // required string trade_id = 4;
    if (has_trade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trade_id());
    }
    
    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
    // optional int32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional string pre_cash = 7;
    if (has_pre_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pre_cash());
    }
    
    // optional string useable_cash = 8;
    if (has_useable_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useable_cash());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string fetched_cash = 9;
    if (has_fetched_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fetched_cash());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WithdrawResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WithdrawResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WithdrawResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WithdrawResult::MergeFrom(const WithdrawResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_withdraw_cash()) {
      set_withdraw_cash(from.withdraw_cash());
    }
    if (from.has_trade_id()) {
      set_trade_id(from.trade_id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_pre_cash()) {
      set_pre_cash(from.pre_cash());
    }
    if (from.has_useable_cash()) {
      set_useable_cash(from.useable_cash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fetched_cash()) {
      set_fetched_cash(from.fetched_cash());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WithdrawResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithdrawResult::CopyFrom(const WithdrawResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithdrawResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  return true;
}

void WithdrawResult::Swap(WithdrawResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(type_, other->type_);
    std::swap(withdraw_cash_, other->withdraw_cash_);
    std::swap(trade_id_, other->trade_id_);
    std::swap(desc_, other->desc_);
    std::swap(time_, other->time_);
    std::swap(pre_cash_, other->pre_cash_);
    std::swap(useable_cash_, other->useable_cash_);
    std::swap(fetched_cash_, other->fetched_cash_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WithdrawResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WithdrawResult_descriptor_;
  metadata.reflection = WithdrawResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlRequest::kSqlidFieldNumber;
const int MysqlRequest::kSqlFieldNumber;
const int MysqlRequest::kIsrequestfieldFieldNumber;
const int MysqlRequest::kLimitFieldNumber;
const int MysqlRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

MysqlRequest::MysqlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlRequest::InitAsDefaultInstance() {
}

MysqlRequest::MysqlRequest(const MysqlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlRequest::SharedCtor() {
  _cached_size_ = 0;
  sqlid_ = 0;
  sql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrequestfield_ = 0;
  limit_ = 0;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlRequest::~MysqlRequest() {
  SharedDtor();
}

void MysqlRequest::SharedDtor() {
  if (sql_ != &::google::protobuf::internal::kEmptyString) {
    delete sql_;
  }
  if (this != default_instance_) {
  }
}

void MysqlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlRequest_descriptor_;
}

const MysqlRequest& MysqlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

MysqlRequest* MysqlRequest::default_instance_ = NULL;

MysqlRequest* MysqlRequest::New() const {
  return new MysqlRequest;
}

void MysqlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sqlid_ = 0;
    if (has_sql()) {
      if (sql_ != &::google::protobuf::internal::kEmptyString) {
        sql_->clear();
      }
    }
    isrequestfield_ = 0;
    limit_ = 0;
    timeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sqlid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqlid_)));
          set_has_sqlid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sql;
        break;
      }
      
      // required string sql = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sql().data(), this->sql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isrequestfield;
        break;
      }
      
      // optional int32 isrequestfield = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrequestfield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrequestfield_)));
          set_has_isrequestfield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sqlid = 1;
  if (has_sqlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sqlid(), output);
  }
  
  // required string sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sql(), output);
  }
  
  // optional int32 isrequestfield = 3;
  if (has_isrequestfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isrequestfield(), output);
  }
  
  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }
  
  // optional int32 timeout = 5;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sqlid = 1;
  if (has_sqlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sqlid(), target);
  }
  
  // required string sql = 2;
  if (has_sql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sql().data(), this->sql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql(), target);
  }
  
  // optional int32 isrequestfield = 3;
  if (has_isrequestfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isrequestfield(), target);
  }
  
  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }
  
  // optional int32 timeout = 5;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sqlid = 1;
    if (has_sqlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqlid());
    }
    
    // required string sql = 2;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }
    
    // optional int32 isrequestfield = 3;
    if (has_isrequestfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrequestfield());
    }
    
    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 timeout = 5;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlRequest::MergeFrom(const MysqlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sqlid()) {
      set_sqlid(from.sqlid());
    }
    if (from.has_sql()) {
      set_sql(from.sql());
    }
    if (from.has_isrequestfield()) {
      set_isrequestfield(from.isrequestfield());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlRequest::CopyFrom(const MysqlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MysqlRequest::Swap(MysqlRequest* other) {
  if (other != this) {
    std::swap(sqlid_, other->sqlid_);
    std::swap(sql_, other->sql_);
    std::swap(isrequestfield_, other->isrequestfield_);
    std::swap(limit_, other->limit_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlRequest_descriptor_;
  metadata.reflection = MysqlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MysqlResult::kRetbaseFieldNumber;
const int MysqlResult::kAffectedrowsFieldNumber;
const int MysqlResult::kInsertidFieldNumber;
const int MysqlResult::kRowsFieldNumber;
const int MysqlResult::kSqlidFieldNumber;
#endif  // !_MSC_VER

MysqlResult::MysqlResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MysqlResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

MysqlResult::MysqlResult(const MysqlResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MysqlResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  affectedrows_ = 0;
  insertid_ = 0;
  sqlid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MysqlResult::~MysqlResult() {
  SharedDtor();
}

void MysqlResult::SharedDtor() {
  if (this != default_instance_) {
    delete retbase_;
  }
}

void MysqlResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MysqlResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MysqlResult_descriptor_;
}

const MysqlResult& MysqlResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

MysqlResult* MysqlResult::default_instance_ = NULL;

MysqlResult* MysqlResult::New() const {
  return new MysqlResult;
}

void MysqlResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    affectedrows_ = 0;
    insertid_ = 0;
    sqlid_ = 0;
  }
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MysqlResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_affectedrows;
        break;
      }
      
      // optional int32 affectedrows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affectedrows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &affectedrows_)));
          set_has_affectedrows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_insertid;
        break;
      }
      
      // optional int32 insertid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insertid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insertid_)));
          set_has_insertid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rows;
        break;
      }
      
      // repeated .com.adv.msg.PRow rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rows;
        if (input->ExpectTag(40)) goto parse_sqlid;
        break;
      }
      
      // optional int32 sqlid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sqlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqlid_)));
          set_has_sqlid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MysqlResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // optional int32 affectedrows = 2;
  if (has_affectedrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->affectedrows(), output);
  }
  
  // optional int32 insertid = 3;
  if (has_insertid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->insertid(), output);
  }
  
  // repeated .com.adv.msg.PRow rows = 4;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rows(i), output);
  }
  
  // optional int32 sqlid = 5;
  if (has_sqlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sqlid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MysqlResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // optional int32 affectedrows = 2;
  if (has_affectedrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->affectedrows(), target);
  }
  
  // optional int32 insertid = 3;
  if (has_insertid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->insertid(), target);
  }
  
  // repeated .com.adv.msg.PRow rows = 4;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rows(i), target);
  }
  
  // optional int32 sqlid = 5;
  if (has_sqlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sqlid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MysqlResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // optional int32 affectedrows = 2;
    if (has_affectedrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->affectedrows());
    }
    
    // optional int32 insertid = 3;
    if (has_insertid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insertid());
    }
    
    // optional int32 sqlid = 5;
    if (has_sqlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqlid());
    }
    
  }
  // repeated .com.adv.msg.PRow rows = 4;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MysqlResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MysqlResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MysqlResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MysqlResult::MergeFrom(const MysqlResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_affectedrows()) {
      set_affectedrows(from.affectedrows());
    }
    if (from.has_insertid()) {
      set_insertid(from.insertid());
    }
    if (from.has_sqlid()) {
      set_sqlid(from.sqlid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MysqlResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MysqlResult::CopyFrom(const MysqlResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MysqlResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  for (int i = 0; i < rows_size(); i++) {
    if (!this->rows(i).IsInitialized()) return false;
  }
  return true;
}

void MysqlResult::Swap(MysqlResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(affectedrows_, other->affectedrows_);
    std::swap(insertid_, other->insertid_);
    rows_.Swap(&other->rows_);
    std::swap(sqlid_, other->sqlid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MysqlResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MysqlResult_descriptor_;
  metadata.reflection = MysqlResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedispRequest::kSqlidFieldNumber;
const int RedispRequest::kKeyFieldNumber;
const int RedispRequest::kParamFieldNumber;
const int RedispRequest::kLimitFieldNumber;
const int RedispRequest::kTimeoutFieldNumber;
const int RedispRequest::kTransidFieldNumber;
#endif  // !_MSC_VER

RedispRequest::RedispRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedispRequest::InitAsDefaultInstance() {
}

RedispRequest::RedispRequest(const RedispRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedispRequest::SharedCtor() {
  _cached_size_ = 0;
  sqlid_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_ = 0;
  limit_ = 0;
  timeout_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedispRequest::~RedispRequest() {
  SharedDtor();
}

void RedispRequest::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RedispRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedispRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedispRequest_descriptor_;
}

const RedispRequest& RedispRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

RedispRequest* RedispRequest::default_instance_ = NULL;

RedispRequest* RedispRequest::New() const {
  return new RedispRequest;
}

void RedispRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sqlid_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    param_ = 0;
    limit_ = 0;
    timeout_ = 0;
    transid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedispRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sqlid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqlid_)));
          set_has_sqlid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }
      
      // optional int32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedispRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sqlid = 1;
  if (has_sqlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sqlid(), output);
  }
  
  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional int32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }
  
  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }
  
  // optional int32 timeout = 5;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeout(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedispRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sqlid = 1;
  if (has_sqlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sqlid(), target);
  }
  
  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional int32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }
  
  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }
  
  // optional int32 timeout = 5;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeout(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedispRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sqlid = 1;
    if (has_sqlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqlid());
    }
    
    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional int32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 timeout = 5;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedispRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedispRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedispRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedispRequest::MergeFrom(const RedispRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sqlid()) {
      set_sqlid(from.sqlid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedispRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedispRequest::CopyFrom(const RedispRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedispRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RedispRequest::Swap(RedispRequest* other) {
  if (other != this) {
    std::swap(sqlid_, other->sqlid_);
    std::swap(key_, other->key_);
    std::swap(param_, other->param_);
    std::swap(limit_, other->limit_);
    std::swap(timeout_, other->timeout_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedispRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedispRequest_descriptor_;
  metadata.reflection = RedispRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedispResult::kRetbaseFieldNumber;
const int RedispResult::kAffectedrowsFieldNumber;
const int RedispResult::kInsertidFieldNumber;
const int RedispResult::kRowsFieldNumber;
const int RedispResult::kSqlidFieldNumber;
const int RedispResult::kTransidFieldNumber;
#endif  // !_MSC_VER

RedispResult::RedispResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedispResult::InitAsDefaultInstance() {
  retbase_ = const_cast< ::com::adv::msg::RetBase*>(&::com::adv::msg::RetBase::default_instance());
}

RedispResult::RedispResult(const RedispResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedispResult::SharedCtor() {
  _cached_size_ = 0;
  retbase_ = NULL;
  affectedrows_ = 0;
  insertid_ = 0;
  sqlid_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedispResult::~RedispResult() {
  SharedDtor();
}

void RedispResult::SharedDtor() {
  if (this != default_instance_) {
    delete retbase_;
  }
}

void RedispResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedispResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedispResult_descriptor_;
}

const RedispResult& RedispResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

RedispResult* RedispResult::default_instance_ = NULL;

RedispResult* RedispResult::New() const {
  return new RedispResult;
}

void RedispResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_retbase()) {
      if (retbase_ != NULL) retbase_->::com::adv::msg::RetBase::Clear();
    }
    affectedrows_ = 0;
    insertid_ = 0;
    sqlid_ = 0;
    transid_ = 0;
  }
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedispResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adv.msg.RetBase retbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_affectedrows;
        break;
      }
      
      // optional int32 affectedrows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affectedrows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &affectedrows_)));
          set_has_affectedrows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_insertid;
        break;
      }
      
      // optional int32 insertid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insertid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insertid_)));
          set_has_insertid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rows;
        break;
      }
      
      // repeated .com.adv.msg.PRow rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rows;
        if (input->ExpectTag(40)) goto parse_sqlid;
        break;
      }
      
      // optional int32 sqlid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sqlid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sqlid_)));
          set_has_sqlid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedispResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->retbase(), output);
  }
  
  // optional int32 affectedrows = 2;
  if (has_affectedrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->affectedrows(), output);
  }
  
  // optional int32 insertid = 3;
  if (has_insertid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->insertid(), output);
  }
  
  // repeated .com.adv.msg.PRow rows = 4;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rows(i), output);
  }
  
  // optional int32 sqlid = 5;
  if (has_sqlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sqlid(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedispResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adv.msg.RetBase retbase = 1;
  if (has_retbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->retbase(), target);
  }
  
  // optional int32 affectedrows = 2;
  if (has_affectedrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->affectedrows(), target);
  }
  
  // optional int32 insertid = 3;
  if (has_insertid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->insertid(), target);
  }
  
  // repeated .com.adv.msg.PRow rows = 4;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rows(i), target);
  }
  
  // optional int32 sqlid = 5;
  if (has_sqlid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sqlid(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedispResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adv.msg.RetBase retbase = 1;
    if (has_retbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->retbase());
    }
    
    // optional int32 affectedrows = 2;
    if (has_affectedrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->affectedrows());
    }
    
    // optional int32 insertid = 3;
    if (has_insertid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insertid());
    }
    
    // optional int32 sqlid = 5;
    if (has_sqlid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sqlid());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  // repeated .com.adv.msg.PRow rows = 4;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedispResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedispResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedispResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedispResult::MergeFrom(const RedispResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retbase()) {
      mutable_retbase()->::com::adv::msg::RetBase::MergeFrom(from.retbase());
    }
    if (from.has_affectedrows()) {
      set_affectedrows(from.affectedrows());
    }
    if (from.has_insertid()) {
      set_insertid(from.insertid());
    }
    if (from.has_sqlid()) {
      set_sqlid(from.sqlid());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedispResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedispResult::CopyFrom(const RedispResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedispResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_retbase()) {
    if (!this->retbase().IsInitialized()) return false;
  }
  for (int i = 0; i < rows_size(); i++) {
    if (!this->rows(i).IsInitialized()) return false;
  }
  return true;
}

void RedispResult::Swap(RedispResult* other) {
  if (other != this) {
    std::swap(retbase_, other->retbase_);
    std::swap(affectedrows_, other->affectedrows_);
    std::swap(insertid_, other->insertid_);
    rows_.Swap(&other->rows_);
    std::swap(sqlid_, other->sqlid_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedispResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedispResult_descriptor_;
  metadata.reflection = RedispResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerCommonMsg::kItemsFieldNumber;
const int InnerCommonMsg::kTransferFieldNumber;
const int InnerCommonMsg::kTimeFieldNumber;
const int InnerCommonMsg::kTransidFieldNumber;
#endif  // !_MSC_VER

InnerCommonMsg::InnerCommonMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerCommonMsg::InitAsDefaultInstance() {
}

InnerCommonMsg::InnerCommonMsg(const InnerCommonMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerCommonMsg::SharedCtor() {
  _cached_size_ = 0;
  transfer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  transid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerCommonMsg::~InnerCommonMsg() {
  SharedDtor();
}

void InnerCommonMsg::SharedDtor() {
  if (transfer_ != &::google::protobuf::internal::kEmptyString) {
    delete transfer_;
  }
  if (this != default_instance_) {
  }
}

void InnerCommonMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerCommonMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerCommonMsg_descriptor_;
}

const InnerCommonMsg& InnerCommonMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_adv_5fprotocol_2eproto();  return *default_instance_;
}

InnerCommonMsg* InnerCommonMsg::default_instance_ = NULL;

InnerCommonMsg* InnerCommonMsg::New() const {
  return new InnerCommonMsg;
}

void InnerCommonMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_transfer()) {
      if (transfer_ != &::google::protobuf::internal::kEmptyString) {
        transfer_->clear();
      }
    }
    time_ = 0;
    transid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerCommonMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.adv.msg.PDataCell items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_transfer;
        break;
      }
      
      // optional string transfer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transfer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transfer().data(), this->transfer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_transid;
        break;
      }
      
      // optional int32 transid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transid_)));
          set_has_transid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerCommonMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.adv.msg.PDataCell items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // optional string transfer = 2;
  if (has_transfer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transfer().data(), this->transfer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transfer(), output);
  }
  
  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->transid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerCommonMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.adv.msg.PDataCell items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // optional string transfer = 2;
  if (has_transfer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transfer().data(), this->transfer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transfer(), target);
  }
  
  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }
  
  // optional int32 transid = 32;
  if (has_transid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->transid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerCommonMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string transfer = 2;
    if (has_transfer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transfer());
    }
    
    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 transid = 32;
    if (has_transid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transid());
    }
    
  }
  // repeated .com.adv.msg.PDataCell items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerCommonMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerCommonMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerCommonMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerCommonMsg::MergeFrom(const InnerCommonMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_transfer()) {
      set_transfer(from.transfer());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_transid()) {
      set_transid(from.transid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerCommonMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerCommonMsg::CopyFrom(const InnerCommonMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCommonMsg::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void InnerCommonMsg::Swap(InnerCommonMsg* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(transfer_, other->transfer_);
    std::swap(time_, other->time_);
    std::swap(transid_, other->transid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerCommonMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerCommonMsg_descriptor_;
  metadata.reflection = InnerCommonMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace adv
}  // namespace com

// @@protoc_insertion_point(global_scope)
